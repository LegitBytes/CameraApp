{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AddNewCameraLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-addNewCamera"
      }
    },
    "FindCameraByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findCameraById"
      }
    },
    "FindAllCamerasLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findAllCameras"
      }
    },
    "UpdateCameraLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-updateCamera"
      }
    },
    "RemoveCameraLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-removeCamera"
      }
    },
    "AddNewCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-addNewCustomer"
      }
    },
    "FindCustomerByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findCustomerById"
      }
    },
    "FindAllCustomersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findAllCustomers"
      }
    },
    "UpdateCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-updateCustomer"
      }
    },
    "RemoveCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-removeCustomer"
      }
    },
    "AddNewGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-addNewGroup"
      }
    },
    "FindGroupByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findGroupById"
      }
    },
    "FindAllGroupsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findAllGroups"
      }
    },
    "UpdateGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-updateGroup"
      }
    },
    "RemoveGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-removeGroup"
      }
    },
    "AddNewIntegratorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-addNewIntegrator"
      }
    },
    "FindIntegratorByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findIntegratorById"
      }
    },
    "FindAllIntegratorsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findAllIntegrators"
      }
    },
    "UpdateIntegratorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-updateIntegrator"
      }
    },
    "RemoveIntegratorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-removeIntegrator"
      }
    },
    "AddNewSiteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-addNewSite"
      }
    },
    "FindSiteByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findSiteById"
      }
    },
    "FindAllSitesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findAllSites"
      }
    },
    "UpdateSiteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-updateSite"
      }
    },
    "RemoveSiteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-removeSite"
      }
    },
    "AddNewUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-addNewUser"
      }
    },
    "FindUserByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findUserById"
      }
    },
    "FindAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-findAllUsers"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-updateUser"
      }
    },
    "RemoveUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/nathan-api-dev-removeUser"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "nathan-api",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nathan-api-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nathan-api-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "nathan-api",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AddNewCameraLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/camera/handler.addCamera",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-addNewCamera",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddNewCameraLogGroup"
      ]
    },
    "FindCameraByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/camera/handler.getCameraById",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findCameraById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindCameraByIdLogGroup"
      ]
    },
    "FindAllCamerasLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/camera/handler.getAllCameras",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findAllCameras",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindAllCamerasLogGroup"
      ]
    },
    "UpdateCameraLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/camera/handler.editCamera",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-updateCamera",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCameraLogGroup"
      ]
    },
    "RemoveCameraLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/camera/handler.deleteCamera",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-removeCamera",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveCameraLogGroup"
      ]
    },
    "AddNewCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/customer/handler.addCustomer",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-addNewCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddNewCustomerLogGroup"
      ]
    },
    "FindCustomerByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/customer/handler.getCustomerById",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findCustomerById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindCustomerByIdLogGroup"
      ]
    },
    "FindAllCustomersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/customer/handler.getAllCustomers",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findAllCustomers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindAllCustomersLogGroup"
      ]
    },
    "UpdateCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/customer/handler.editCustomer",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-updateCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCustomerLogGroup"
      ]
    },
    "RemoveCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/customer/handler.deleteCustomer",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-removeCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveCustomerLogGroup"
      ]
    },
    "AddNewGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/group/handler.addGroup",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-addNewGroup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddNewGroupLogGroup"
      ]
    },
    "FindGroupByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/group/handler.getGroupById",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findGroupById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindGroupByIdLogGroup"
      ]
    },
    "FindAllGroupsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/group/handler.getAllGroups",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findAllGroups",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindAllGroupsLogGroup"
      ]
    },
    "UpdateGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/group/handler.editGroup",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-updateGroup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateGroupLogGroup"
      ]
    },
    "RemoveGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/group/handler.deleteGroup",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-removeGroup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveGroupLogGroup"
      ]
    },
    "AddNewIntegratorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/integrator/handler.addIntegrator",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-addNewIntegrator",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddNewIntegratorLogGroup"
      ]
    },
    "FindIntegratorByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/integrator/handler.getIntegratorById",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findIntegratorById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindIntegratorByIdLogGroup"
      ]
    },
    "FindAllIntegratorsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/integrator/handler.getAllIntegrators",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findAllIntegrators",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindAllIntegratorsLogGroup"
      ]
    },
    "UpdateIntegratorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/integrator/handler.editIntegrator",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-updateIntegrator",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateIntegratorLogGroup"
      ]
    },
    "RemoveIntegratorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/integrator/handler.deleteIntegrator",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-removeIntegrator",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveIntegratorLogGroup"
      ]
    },
    "AddNewSiteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/site/handler.addSite",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-addNewSite",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddNewSiteLogGroup"
      ]
    },
    "FindSiteByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/site/handler.getSiteById",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findSiteById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindSiteByIdLogGroup"
      ]
    },
    "FindAllSitesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/site/handler.getAllSites",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findAllSites",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindAllSitesLogGroup"
      ]
    },
    "UpdateSiteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/site/handler.editSite",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-updateSite",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateSiteLogGroup"
      ]
    },
    "RemoveSiteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/site/handler.deleteSite",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-removeSite",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveSiteLogGroup"
      ]
    },
    "AddNewUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/user/handler.addUser",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-addNewUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddNewUserLogGroup"
      ]
    },
    "FindUserByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/user/handler.getUserById",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findUserById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindUserByIdLogGroup"
      ]
    },
    "FindAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/user/handler.getAllUsers",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-findAllUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FindAllUsersLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/user/handler.editUser",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-updateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "RemoveUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/nathan-api/dev/1623022317878-2021-06-06T23:31:57.878Z/nathan-api.zip"
        },
        "Handler": "functions/user/handler.deleteUser",
        "Runtime": "nodejs14.x",
        "FunctionName": "nathan-api-dev-removeUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATABASE_URL": "postgresql://postgres:cyberoi00@cameraapp.chb5fqsyxcy2.us-east-1.rds.amazonaws.com:5432/camera_app?schema=public"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveUserLogGroup"
      ]
    },
    "AddNewCameraLambdaVersionaLuzkNoF8BLaN7uknlG8ksq7XghpJkAKQa3v7CSLZ0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddNewCameraLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindCameraByIdLambdaVersionud2veo56NOzk4ZXQPSrUN6RRsayQ1nYlvScQ7x7Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindCameraByIdLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindAllCamerasLambdaVersionW19PgeuWAGIsEWNgsHn05tAtuzYOMv39Px4QhF4euk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindAllCamerasLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "UpdateCameraLambdaVersionF7NVU0m5s562dlKNvfCWyCHwwzFVF1vC4QkfCFiU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCameraLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "RemoveCameraLambdaVersionGyIr8CTWRoOZSbIlzaSJ6imfeZfCE2Cr6tmDlZRwQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveCameraLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "AddNewCustomerLambdaVersionzFQqDjWMcuj19jH0Vc1j6YR5MZy2g5iqBbMfEn1Ji8w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddNewCustomerLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindCustomerByIdLambdaVersionv6ClcKyLd9xYwcNVf5LEB3Ul878ujYQ1NeaGStn2Gw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindCustomerByIdLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindAllCustomersLambdaVersionyvGTy633YPl7I8IOpn9oHoxh7PphIXQKRO7D8s6qqw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindAllCustomersLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "UpdateCustomerLambdaVersionn9xSnDpmwICldFlrhH05gYK4ZZjHp4sURMmjrbRF4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCustomerLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "RemoveCustomerLambdaVersion29L4ulPluR3r6le2lMXh4AxQKrQTzGC0FE5MdC9A0hE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveCustomerLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "AddNewGroupLambdaVersionw6k7vI0kxGQclKkER3N06pKEgHueSLKchqUFDwaAE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddNewGroupLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindGroupByIdLambdaVersiontemk4pmNNOq7pTQKll89EGBGFrWSlW0E32ZKYwuY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindGroupByIdLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindAllGroupsLambdaVersionJNaAG3htEzRa8h74YnHbyhZoQpoxRyl8a0IsX9DY8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindAllGroupsLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "UpdateGroupLambdaVersion1z2yVf1LYHMjCoaup6S8eqAslOeZ660Dt14rQzkSXk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateGroupLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "RemoveGroupLambdaVersionK3QLKu9JKRvolbB8R4E2Qzcv8viUlCr2kH8a55FVPk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveGroupLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "AddNewIntegratorLambdaVersionvH7fXlbh2pBqcu4fy4vSQhhNwnx1GIQ3xrP4qcNgQY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddNewIntegratorLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindIntegratorByIdLambdaVersionShq59KqqjnYTLHR3J7KmQJKo3zjn9aqikl0tfiAUM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindIntegratorByIdLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindAllIntegratorsLambdaVersionQdjUodvMfW32G0kPOFEXiIo5OXIHW98NPJyMBUDO2c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindAllIntegratorsLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "UpdateIntegratorLambdaVersionUDsrkf3PIKeHkChBFIVrgiiTAk5CZsG8N7uFMg0nX0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateIntegratorLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "RemoveIntegratorLambdaVersion3NPRDtu1mTJYwKUoM43rPGhtz45fZQaPZiO0bxVUVSg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveIntegratorLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "AddNewSiteLambdaVersionwlohrKUMD7TTm8WJEURV79uIwQeAzMbNa4nDJfTiA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddNewSiteLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindSiteByIdLambdaVersion1g0wbnSqsEPqfPzgk3qcU6IlSJsYmvavmwZQVte2e4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindSiteByIdLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindAllSitesLambdaVersionkWzBBiP9uHSmc74eeszoeR85azPY5aDbftqQKNgtE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindAllSitesLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "UpdateSiteLambdaVersionCIXARNls9s5RoLj5WjTNENIbzqxKU9RQ0SaRLmIESI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateSiteLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "RemoveSiteLambdaVersionyTjbV8opCO7b2oulY498Zp70ctYET093YEu5mxU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveSiteLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "AddNewUserLambdaVersionwi3ym2Ea4TkyzT7vDRLZb9ZlRHUci65ScmZQesQtfY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddNewUserLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindUserByIdLambdaVersionF32SrlWhFI9RzZ1ZMWUq1aJLLu7i1lmnuEUO1x4tE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindUserByIdLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "FindAllUsersLambdaVersionMNxUxRJb6xLDAZiEhIdJJHc0uXOws97i9MxVBzj7JSM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FindAllUsersLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "UpdateUserLambdaVersionJYbIa3XR4j14QCEvCIazvnS26IM0i1XFO5VGdstO4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "RemoveUserLambdaVersionJSJjEgaO18QsfRkUL9siRtWJWyTVXcWoZsgKszmNcg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveUserLambdaFunction"
        },
        "CodeSha256": "Q50vRY4wIl/7SPDTFXruIT5mlhgoyx9ztaJK3Gmv0/U="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "nathan-api-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceCameras": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "cameras",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCamerasAddDashcamera": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCameras"
        },
        "PathPart": "add-camera",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCamerasCameraidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCameras"
        },
        "PathPart": "{cameraId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCustomers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "customers",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCustomersAddDashcustomer": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCustomers"
        },
        "PathPart": "add-customer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCustomersCustomeridVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCustomers"
        },
        "PathPart": "{customerId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGroups": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "groups",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGroupsAddDashgroup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "PathPart": "add-group",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGroupsGroupidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "PathPart": "{groupId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIntegrators": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "integrators",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIntegratorsAddDashintegrator": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIntegrators"
        },
        "PathPart": "add-integrator",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIntegratorsIntegratoridVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIntegrators"
        },
        "PathPart": "{integratorId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSites": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "sites",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSitesAddDashsite": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSites"
        },
        "PathPart": "add-site",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSitesSiteidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSites"
        },
        "PathPart": "{siteId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersAddDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "add-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersUseridVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "{userId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCamerasAddDashcameraPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCamerasAddDashcamera"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddNewCameraLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodCamerasAddDashcameraPostApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodCamerasCameraidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCamerasCameraidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindCameraByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodCamerasGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCameras"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindAllCamerasLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodCamerasCameraidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCamerasCameraidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateCameraLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodCamerasCameraidVarPutApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodCamerasCameraidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCamerasCameraidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveCameraLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodCustomersAddDashcustomerPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomersAddDashcustomer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddNewCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodCustomersAddDashcustomerPostApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodCustomersCustomeridVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomersCustomeridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindCustomerByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodCustomersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindAllCustomersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodCustomersCustomeridVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomersCustomeridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodCustomersCustomeridVarPutApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodCustomersCustomeridVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCustomersCustomeridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGroupsAddDashgroupPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsAddDashgroup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddNewGroupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodGroupsAddDashgroupPostApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodGroupsGroupidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindGroupByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGroupsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindAllGroupsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGroupsGroupidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateGroupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodGroupsGroupidVarPutApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodGroupsGroupidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveGroupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodIntegratorsAddDashintegratorPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceIntegratorsAddDashintegrator"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddNewIntegratorLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodIntegratorsAddDashintegratorPostApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodIntegratorsIntegratoridVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceIntegratorsIntegratoridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindIntegratorByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodIntegratorsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceIntegrators"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindAllIntegratorsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodIntegratorsIntegratoridVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceIntegratorsIntegratoridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateIntegratorLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodIntegratorsIntegratoridVarPutApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodIntegratorsIntegratoridVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceIntegratorsIntegratoridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveIntegratorLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodSitesAddDashsitePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSitesAddDashsite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddNewSiteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodSitesAddDashsitePostApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodSitesSiteidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSitesSiteidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindSiteByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodSitesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSites"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindAllSitesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodSitesSiteidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSitesSiteidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateSiteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodSitesSiteidVarPutApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodSitesSiteidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSitesSiteidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveSiteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodUsersAddDashuserPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersAddDashuser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddNewUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodUsersAddDashuserPostApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodUsersUseridVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersUseridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindUserByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodUsersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FindAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodUsersUseridVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersUseridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayNathanapiRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodUsersUseridVarPutApplicationJsonModel"
          }
        }
      }
    },
    "ApiGatewayMethodUsersUseridVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersUseridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayNathanapiRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "nathan-api-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayMethodCamerasAddDashcameraPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "camera_name": {
              "type": "string"
            },
            "camera_ip": {
              "type": "string"
            },
            "smtp_user_name": {
              "type": "string"
            },
            "smtp_password": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            },
            "user_ids": {
              "type": "array"
            }
          },
          "required": [
            "camera_name",
            "smtp_user_name",
            "smtp_password",
            "group_id",
            "integrator_id"
          ]
        }
      }
    },
    "ApiGatewayMethodCamerasCameraidVarPutApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "camera_name": {
              "type": "string"
            },
            "camera_ip": {
              "type": "string"
            },
            "smtp_user_name": {
              "type": "string"
            },
            "smtp_password": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            },
            "user_ids": {
              "type": "array"
            }
          },
          "required": [
            "camera_name",
            "smtp_user_name",
            "smtp_password",
            "group_id",
            "integrator_id"
          ]
        }
      }
    },
    "ApiGatewayMethodCustomersAddDashcustomerPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "customer_name": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "user_ids": {
              "type": "array"
            },
            "site_ids": {
              "type": "array"
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "customer_name",
            "group_id",
            "user_ids",
            "site_ids",
            "integrator_id"
          ]
        }
      }
    },
    "ApiGatewayMethodCustomersCustomeridVarPutApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "customer_name": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "user_ids": {
              "type": "array"
            },
            "site_ids": {
              "type": "array"
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "customer_name",
            "group_id",
            "user_ids",
            "site_ids",
            "integrator_id"
          ]
        }
      }
    },
    "ApiGatewayMethodGroupsAddDashgroupPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "group_name": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "group_name",
            "integrator_id"
          ]
        }
      }
    },
    "ApiGatewayMethodGroupsGroupidVarPutApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "group_name": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "group_name",
            "integrator_id"
          ]
        }
      }
    },
    "ApiGatewayMethodIntegratorsAddDashintegratorPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "email",
            "phone"
          ]
        }
      }
    },
    "ApiGatewayMethodIntegratorsIntegratoridVarPutApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "email",
            "phone"
          ]
        }
      }
    },
    "ApiGatewayMethodSitesAddDashsitePostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "site_name": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "user_ids": {
              "type": "array"
            },
            "customer_ids": {
              "type": "array"
            },
            "camera_ids": {
              "type": "array"
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "site_name",
            "group_id",
            "integrator_id",
            "user_ids",
            "customer_ids",
            "camera_ids"
          ]
        }
      }
    },
    "ApiGatewayMethodSitesSiteidVarPutApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "site_name": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "user_ids": {
              "type": "array"
            },
            "customer_ids": {
              "type": "array"
            },
            "camera_ids": {
              "type": "array"
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "site_name",
            "group_id",
            "integrator_id",
            "user_ids",
            "customer_ids",
            "camera_ids"
          ]
        }
      }
    },
    "ApiGatewayMethodUsersAddDashuserPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "user_email": {
              "type": "string"
            },
            "user_name": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "change_name": {
              "type": "string"
            },
            "customer_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "site_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "camera_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "user_email",
            "group_id",
            "site_ids",
            "customer_ids",
            "camera_ids",
            "integrator_id"
          ]
        }
      }
    },
    "ApiGatewayMethodUsersUseridVarPutApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "user_email": {
              "type": "string"
            },
            "user_name": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "integrator_id": {
              "type": "string"
            },
            "change_name": {
              "type": "string"
            },
            "customer_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "site_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "camera_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "is_disabled": {
              "type": "boolean"
            }
          },
          "required": [
            "user_email",
            "group_id",
            "site_ids",
            "customer_ids",
            "camera_ids",
            "integrator_id"
          ]
        }
      }
    },
    "ApiGatewayDeployment1623022271196": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodCamerasAddDashcameraPost",
        "ApiGatewayMethodCamerasCameraidVarGet",
        "ApiGatewayMethodCamerasGet",
        "ApiGatewayMethodCamerasCameraidVarPut",
        "ApiGatewayMethodCamerasCameraidVarDelete",
        "ApiGatewayMethodCustomersAddDashcustomerPost",
        "ApiGatewayMethodCustomersCustomeridVarGet",
        "ApiGatewayMethodCustomersGet",
        "ApiGatewayMethodCustomersCustomeridVarPut",
        "ApiGatewayMethodCustomersCustomeridVarDelete",
        "ApiGatewayMethodGroupsAddDashgroupPost",
        "ApiGatewayMethodGroupsGroupidVarGet",
        "ApiGatewayMethodGroupsGet",
        "ApiGatewayMethodGroupsGroupidVarPut",
        "ApiGatewayMethodGroupsGroupidVarDelete",
        "ApiGatewayMethodIntegratorsAddDashintegratorPost",
        "ApiGatewayMethodIntegratorsIntegratoridVarGet",
        "ApiGatewayMethodIntegratorsGet",
        "ApiGatewayMethodIntegratorsIntegratoridVarPut",
        "ApiGatewayMethodIntegratorsIntegratoridVarDelete",
        "ApiGatewayMethodSitesAddDashsitePost",
        "ApiGatewayMethodSitesSiteidVarGet",
        "ApiGatewayMethodSitesGet",
        "ApiGatewayMethodSitesSiteidVarPut",
        "ApiGatewayMethodSitesSiteidVarDelete",
        "ApiGatewayMethodUsersAddDashuserPost",
        "ApiGatewayMethodUsersUseridVarGet",
        "ApiGatewayMethodUsersGet",
        "ApiGatewayMethodUsersUseridVarPut",
        "ApiGatewayMethodUsersUseridVarDelete"
      ]
    },
    "AddNewCameraLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddNewCameraLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindCameraByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindCameraByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindAllCamerasLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindAllCamerasLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateCameraLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCameraLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveCameraLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveCameraLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddNewCustomerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddNewCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindCustomerByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindCustomerByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindAllCustomersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindAllCustomersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateCustomerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveCustomerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddNewGroupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddNewGroupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindGroupByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindGroupByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindAllGroupsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindAllGroupsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateGroupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateGroupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveGroupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveGroupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddNewIntegratorLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddNewIntegratorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindIntegratorByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindIntegratorByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindAllIntegratorsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindAllIntegratorsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateIntegratorLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateIntegratorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveIntegratorLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveIntegratorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddNewSiteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddNewSiteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindSiteByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindSiteByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindAllSitesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindAllSitesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateSiteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateSiteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveSiteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveSiteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddNewUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddNewUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindUserByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FindAllUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FindAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-ServerlessDeploymentBucketName"
      }
    },
    "AddNewCameraLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddNewCameraLambdaVersionaLuzkNoF8BLaN7uknlG8ksq7XghpJkAKQa3v7CSLZ0"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-AddNewCameraLambdaFunctionQualifiedArn"
      }
    },
    "FindCameraByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindCameraByIdLambdaVersionud2veo56NOzk4ZXQPSrUN6RRsayQ1nYlvScQ7x7Q"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindCameraByIdLambdaFunctionQualifiedArn"
      }
    },
    "FindAllCamerasLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindAllCamerasLambdaVersionW19PgeuWAGIsEWNgsHn05tAtuzYOMv39Px4QhF4euk"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindAllCamerasLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCameraLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCameraLambdaVersionF7NVU0m5s562dlKNvfCWyCHwwzFVF1vC4QkfCFiU"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-UpdateCameraLambdaFunctionQualifiedArn"
      }
    },
    "RemoveCameraLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveCameraLambdaVersionGyIr8CTWRoOZSbIlzaSJ6imfeZfCE2Cr6tmDlZRwQ"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-RemoveCameraLambdaFunctionQualifiedArn"
      }
    },
    "AddNewCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddNewCustomerLambdaVersionzFQqDjWMcuj19jH0Vc1j6YR5MZy2g5iqBbMfEn1Ji8w"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-AddNewCustomerLambdaFunctionQualifiedArn"
      }
    },
    "FindCustomerByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindCustomerByIdLambdaVersionv6ClcKyLd9xYwcNVf5LEB3Ul878ujYQ1NeaGStn2Gw"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindCustomerByIdLambdaFunctionQualifiedArn"
      }
    },
    "FindAllCustomersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindAllCustomersLambdaVersionyvGTy633YPl7I8IOpn9oHoxh7PphIXQKRO7D8s6qqw"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindAllCustomersLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCustomerLambdaVersionn9xSnDpmwICldFlrhH05gYK4ZZjHp4sURMmjrbRF4"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-UpdateCustomerLambdaFunctionQualifiedArn"
      }
    },
    "RemoveCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveCustomerLambdaVersion29L4ulPluR3r6le2lMXh4AxQKrQTzGC0FE5MdC9A0hE"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-RemoveCustomerLambdaFunctionQualifiedArn"
      }
    },
    "AddNewGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddNewGroupLambdaVersionw6k7vI0kxGQclKkER3N06pKEgHueSLKchqUFDwaAE"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-AddNewGroupLambdaFunctionQualifiedArn"
      }
    },
    "FindGroupByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindGroupByIdLambdaVersiontemk4pmNNOq7pTQKll89EGBGFrWSlW0E32ZKYwuY"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindGroupByIdLambdaFunctionQualifiedArn"
      }
    },
    "FindAllGroupsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindAllGroupsLambdaVersionJNaAG3htEzRa8h74YnHbyhZoQpoxRyl8a0IsX9DY8"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindAllGroupsLambdaFunctionQualifiedArn"
      }
    },
    "UpdateGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateGroupLambdaVersion1z2yVf1LYHMjCoaup6S8eqAslOeZ660Dt14rQzkSXk"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-UpdateGroupLambdaFunctionQualifiedArn"
      }
    },
    "RemoveGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveGroupLambdaVersionK3QLKu9JKRvolbB8R4E2Qzcv8viUlCr2kH8a55FVPk"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-RemoveGroupLambdaFunctionQualifiedArn"
      }
    },
    "AddNewIntegratorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddNewIntegratorLambdaVersionvH7fXlbh2pBqcu4fy4vSQhhNwnx1GIQ3xrP4qcNgQY"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-AddNewIntegratorLambdaFunctionQualifiedArn"
      }
    },
    "FindIntegratorByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindIntegratorByIdLambdaVersionShq59KqqjnYTLHR3J7KmQJKo3zjn9aqikl0tfiAUM"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindIntegratorByIdLambdaFunctionQualifiedArn"
      }
    },
    "FindAllIntegratorsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindAllIntegratorsLambdaVersionQdjUodvMfW32G0kPOFEXiIo5OXIHW98NPJyMBUDO2c"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindAllIntegratorsLambdaFunctionQualifiedArn"
      }
    },
    "UpdateIntegratorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateIntegratorLambdaVersionUDsrkf3PIKeHkChBFIVrgiiTAk5CZsG8N7uFMg0nX0"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-UpdateIntegratorLambdaFunctionQualifiedArn"
      }
    },
    "RemoveIntegratorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveIntegratorLambdaVersion3NPRDtu1mTJYwKUoM43rPGhtz45fZQaPZiO0bxVUVSg"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-RemoveIntegratorLambdaFunctionQualifiedArn"
      }
    },
    "AddNewSiteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddNewSiteLambdaVersionwlohrKUMD7TTm8WJEURV79uIwQeAzMbNa4nDJfTiA"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-AddNewSiteLambdaFunctionQualifiedArn"
      }
    },
    "FindSiteByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindSiteByIdLambdaVersion1g0wbnSqsEPqfPzgk3qcU6IlSJsYmvavmwZQVte2e4"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindSiteByIdLambdaFunctionQualifiedArn"
      }
    },
    "FindAllSitesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindAllSitesLambdaVersionkWzBBiP9uHSmc74eeszoeR85azPY5aDbftqQKNgtE"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindAllSitesLambdaFunctionQualifiedArn"
      }
    },
    "UpdateSiteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateSiteLambdaVersionCIXARNls9s5RoLj5WjTNENIbzqxKU9RQ0SaRLmIESI"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-UpdateSiteLambdaFunctionQualifiedArn"
      }
    },
    "RemoveSiteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveSiteLambdaVersionyTjbV8opCO7b2oulY498Zp70ctYET093YEu5mxU"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-RemoveSiteLambdaFunctionQualifiedArn"
      }
    },
    "AddNewUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddNewUserLambdaVersionwi3ym2Ea4TkyzT7vDRLZb9ZlRHUci65ScmZQesQtfY"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-AddNewUserLambdaFunctionQualifiedArn"
      }
    },
    "FindUserByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindUserByIdLambdaVersionF32SrlWhFI9RzZ1ZMWUq1aJLLu7i1lmnuEUO1x4tE"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindUserByIdLambdaFunctionQualifiedArn"
      }
    },
    "FindAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FindAllUsersLambdaVersionMNxUxRJb6xLDAZiEhIdJJHc0uXOws97i9MxVBzj7JSM"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-FindAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersionJYbIa3XR4j14QCEvCIazvnS26IM0i1XFO5VGdstO4"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "RemoveUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveUserLambdaVersionJSJjEgaO18QsfRkUL9siRtWJWyTVXcWoZsgKszmNcg"
      },
      "Export": {
        "Name": "sls-nathan-api-dev-RemoveUserLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-nathan-api-dev-ServiceEndpoint"
      }
    }
  }
}