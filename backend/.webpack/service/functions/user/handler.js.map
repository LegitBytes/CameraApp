{"version":3,"sources":["webpack://ts-sequelize-exp/./libs/apiGateway.ts","webpack://ts-sequelize-exp/./libs/constants.ts","webpack://ts-sequelize-exp/./libs/lambda.ts","webpack://ts-sequelize-exp/external \"@middy/core\"","webpack://ts-sequelize-exp/external \"@middy/http-json-body-parser\"","webpack://ts-sequelize-exp/external \"@prisma/client\"","webpack://ts-sequelize-exp/webpack/bootstrap","webpack://ts-sequelize-exp/webpack/runtime/compat get default export","webpack://ts-sequelize-exp/webpack/runtime/define property getters","webpack://ts-sequelize-exp/webpack/runtime/hasOwnProperty shorthand","webpack://ts-sequelize-exp/webpack/runtime/make namespace object","webpack://ts-sequelize-exp/./functions/user/handler.ts"],"names":["formatJSONResponseStatusOk","response","statusCode","body","JSON","stringify","headers","formatJSONResponseStatusCreated","formatJSONResponseStatusBadRequest","formatJSONResponseStatusServerError","INTEGRATOR_SAVE","INTEGRATOR_UPDATE","INTEGRATOR_DELETE","INTEGRATOR_NOT_FOUND","INTEGRATOR_PATHPARAMETERS_ERROR","GROUP_SAVE","GROUP_UPDATE","GROUP_DELETE","GROUP_NOT_FOUND","GROUP_PATHPARAMETERS_ERROR","GROUP_ID_NOT_PROVIDED_ERROR","SITE_SAVE","SITE_UPDATE","SITE_DELETE","SITE_NOT_FOUND","SITE_PATHPARAMETERS_ERROR","SITE_ID_NOT_PROVIDED_ERROR","USER_SAVE","USER_UPDATE","USER_DELETE","USER_NOT_FOUND","USER_PATHPARAMETERS_ERROR","USER_ID_NOT_PROVIDED_ERROR","CUSTOMER_SAVE","CUSTOMER_UPDATE","CUSTOMER_DELETE","CUSTOMER_NOT_FOUND","CUSTOMER_PATHPARAMETERS_ERROR","CUSTOMER_ID_NOT_PROVIDED_ERROR","CAMERA_SAVE","CAMERA_UPDATE","CAMERA_DELETE","CAMERA_NOT_FOUND","CAMERA_PATHPARAMETERS_ERROR","CAMERA_ID_NOT_PROVIDED_ERROR","SERVER_ERROR","middyfy","handler","use","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","prisma","PrismaClient","addUser","async","event","user_email","group_id","site_ids","customer_ids","camera_ids","integrator_id","message","sites","map","site_id","findUnique","where","customers","customer_id","cameras","camera_id","user","users","create","data","groups","connect","integrators","include","error","console","getUserById","pathParameters","userId","user_id","select","is_disabled","createdAt","updatedAt","camera_count_query","$queryRaw","customer_count_query","site_count_query","camera_count","length","customer_count","site_count","getAllUsers","findMany","updated_users","Promise","all","editUser","update","deleteUser","delete"],"mappings":"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","file":"functions/user/handler.js","sourcesContent":["import type {\r\n  APIGatewayProxyEvent,\r\n  APIGatewayProxyResult,\r\n  Handler,\r\n} from \"aws-lambda\";\r\nimport type { FromSchema } from \"json-schema-to-ts\";\r\n\r\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, \"body\"> & {\r\n  body: FromSchema<S>;\r\n};\r\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<\r\n  ValidatedAPIGatewayProxyEvent<S>,\r\n  APIGatewayProxyResult\r\n>;\r\n\r\nexport const formatJSONResponseStatusOk = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 200,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const formatJSONResponseStatusCreated = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 201,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const formatJSONResponseStatusBadRequest = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 400,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const formatJSONResponseStatusNotFound = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 404,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const formatJSONResponseStatusServerError = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 500,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  };\r\n};\r\n","export default {\r\n  INTEGRATOR_SAVE: \"Integrator Saved Successfully.\",\r\n  INTEGRATOR_UPDATE: \"Integrator Updated Successfully.\",\r\n  INTEGRATOR_DELETE: \"Integrator Deleted Successfully.\",\r\n  INTEGRATOR_NOT_FOUND: \"Integrator not found with the given ID.\",\r\n  INTEGRATOR_PATHPARAMETERS_ERROR: \"Please provide Integrator ID.\",\r\n  GROUP_SAVE: \"Group Saved Successfully.\",\r\n  GROUP_UPDATE: \"Group Updated Successfully.\",\r\n  GROUP_DELETE: \"Group Deleted Successfully.\",\r\n  GROUP_NOT_FOUND: \"Group not found with the given ID.\",\r\n  GROUP_PATHPARAMETERS_ERROR: \"Please provide Group ID.\",\r\n  GROUP_ID_NOT_PROVIDED_ERROR: \"Please provide Group IDs.\",\r\n  SITE_SAVE: \"Site Saved Successfully.\",\r\n  SITE_UPDATE: \"Site Updated Successfully.\",\r\n  SITE_DELETE: \"Site Deleted Successfully.\",\r\n  SITE_NOT_FOUND: \"Site not found with the given ID.\",\r\n  SITE_PATHPARAMETERS_ERROR: \"Please provide Site ID.\",\r\n  SITE_ID_NOT_PROVIDED_ERROR: \"Please provide Site IDs.\",\r\n  USER_SAVE: \"User Saved Successfully.\",\r\n  USER_UPDATE: \"User Updated Successfully.\",\r\n  USER_DELETE: \"User Deleted Successfully.\",\r\n  USER_NOT_FOUND: \"User not found with the given ID.\",\r\n  USER_PATHPARAMETERS_ERROR: \"Please provide User ID.\",\r\n  USER_ID_NOT_PROVIDED_ERROR: \"Please provide User IDs.\",\r\n  CUSTOMER_SAVE: \"Customer Saved Successfully.\",\r\n  CUSTOMER_UPDATE: \"Customer Updated Successfully.\",\r\n  CUSTOMER_DELETE: \"Customer Deleted Successfully.\",\r\n  CUSTOMER_NOT_FOUND: \"Customer not found with the given ID.\",\r\n  CUSTOMER_PATHPARAMETERS_ERROR: \"Please provide Customer ID.\",\r\n  CUSTOMER_ID_NOT_PROVIDED_ERROR: \"Please provide Customer IDs.\",\r\n  CAMERA_SAVE: \"Camera Saved Successfully.\",\r\n  CAMERA_UPDATE: \"Camera Updated Successfully.\",\r\n  CAMERA_DELETE: \"Camera Deleted Successfully.\",\r\n  CAMERA_NOT_FOUND: \"Camera not found with the given ID.\",\r\n  CAMERA_PATHPARAMETERS_ERROR: \"Please provide Camera ID.\",\r\n  CAMERA_ID_NOT_PROVIDED_ERROR: \"Please provide Camera IDs.\",\r\n  SERVER_ERROR: \"Internal Server Error occured.\",\r\n};\r\n","import middy from \"@middy/core\";\r\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\";\r\n\r\nexport const middyfy = (handler: any) => {\r\n  return middy(handler).use(middyJsonBodyParser());\r\n};\r\n","module.exports = require(\"@middy/core\");;","module.exports = require(\"@middy/http-json-body-parser\");;","module.exports = require(\"@prisma/client\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import schema from \"./schema\";\r\nimport {\r\n  formatJSONResponseStatusBadRequest,\r\n  formatJSONResponseStatusCreated,\r\n  formatJSONResponseStatusOk,\r\n  formatJSONResponseStatusServerError,\r\n  ValidatedEventAPIGatewayProxyEvent,\r\n} from \"@libs/apiGateway\";\r\nimport { middyfy } from \"@libs/lambda\";\r\nimport constants from \"@libs/constants\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Add a new User\r\nconst addNewUser: ValidatedEventAPIGatewayProxyEvent<typeof schema> = async (\r\n  event: any\r\n) => {\r\n  try {\r\n    const {\r\n      user_email,\r\n      group_id,\r\n      site_ids,\r\n      customer_ids,\r\n      camera_ids,\r\n      integrator_id,\r\n    } = event.body;\r\n\r\n    if (!site_ids) {\r\n      return formatJSONResponseStatusBadRequest({\r\n        message: constants.SITE_ID_NOT_PROVIDED_ERROR,\r\n      });\r\n    }\r\n    if (!customer_ids) {\r\n      return formatJSONResponseStatusBadRequest({\r\n        message: constants.CUSTOMER_ID_NOT_PROVIDED_ERROR,\r\n      });\r\n    }\r\n    if (!camera_ids) {\r\n      return formatJSONResponseStatusBadRequest({\r\n        message: constants.CAMERA_ID_NOT_PROVIDED_ERROR,\r\n      });\r\n    }\r\n    const sites = site_ids.map(\r\n      async (site_id: string) =>\r\n        await prisma.sites.findUnique({ where: { site_id } })\r\n    );\r\n\r\n    const customers = customer_ids.map(\r\n      async (customer_id: string) =>\r\n        await prisma.customers.findUnique({ where: { customer_id } })\r\n    );\r\n\r\n    const cameras = camera_ids.map(\r\n      async (camera_id: string) =>\r\n        await prisma.cameras.findUnique({ where: { camera_id } })\r\n    );\r\n\r\n    const user = await prisma.users.create({\r\n      data: {\r\n        groups: {\r\n          connect: { group_id },\r\n        },\r\n        integrators: {\r\n          connect: { integrator_id },\r\n        },\r\n        user_email: user_email,\r\n        customers: {\r\n          create: customers,\r\n        },\r\n        sites: {\r\n          create: sites,\r\n        },\r\n        cameras: {\r\n          create: cameras,\r\n        },\r\n      },\r\n      include: {\r\n        customers: true,\r\n        sites: true,\r\n        cameras: true,\r\n      },\r\n    });\r\n\r\n    return formatJSONResponseStatusCreated({\r\n      message: constants.USER_SAVE,\r\n      user,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n// Find an User by ID.\r\nconst findUserById = async (event) => {\r\n  if (!event.pathParameters || !event.pathParameters.userId) {\r\n    return formatJSONResponseStatusBadRequest({\r\n      message: constants.USER_PATHPARAMETERS_ERROR,\r\n    });\r\n  }\r\n  const user_id = event.pathParameters.userId;\r\n  try {\r\n    const user = await prisma.users.findUnique({\r\n      where: {\r\n        user_id,\r\n      },\r\n      select: {\r\n        user_id: true,\r\n        user_email: true,\r\n        is_disabled: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        groups: true,\r\n        integrators: true,\r\n        cameras: true,\r\n        customers: true,\r\n        sites: true,\r\n      },\r\n    });\r\n\r\n    const camera_count_query = await prisma.$queryRaw(`SELECT c.camera_id\r\n      FROM  \"_camerasTousers\" cu\r\n      JOIN  cameras c ON cu.\"A\" = c.camera_id\r\n      JOIN  users u ON cu.\"B\" = u.user_id\r\n      WHERE u.user_id::text = '${user_id}'\r\n      GROUP BY c.camera_id;`);\r\n\r\n    const customer_count_query = await prisma.$queryRaw(`SELECT c.customer_id\r\n      FROM  \"_customersTousers\" cu\r\n      JOIN  customers c ON cu.\"A\" = c.customer_id\r\n      JOIN  users u ON cu.\"B\" = u.user_id\r\n      WHERE u.user_id::text = '${user_id}'\r\n      GROUP BY c.customer_id;`);\r\n\r\n    const site_count_query = await prisma.$queryRaw(`SELECT s.site_id\r\n      FROM  \"_sitesTousers\" su\r\n      JOIN  sites s ON su.\"A\" = s.site_id\r\n      JOIN  users u ON su.\"B\" = u.user_id\r\n      WHERE u.user_id::text = '${user_id}'\r\n      GROUP BY s.site_id;`);\r\n\r\n    const camera_count = camera_count_query.length;\r\n    const customer_count = customer_count_query.length;\r\n    const site_count = site_count_query.length;\r\n\r\n    return formatJSONResponseStatusOk({\r\n      user: {\r\n        ...user,\r\n        camera_count,\r\n        customer_count,\r\n        site_count,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n// Find All user details\r\nconst findAllUsers = async () => {\r\n  const users = await prisma.users.findMany({\r\n    select: {\r\n      user_id: true,\r\n      user_email: true,\r\n      is_disabled: true,\r\n      createdAt: true,\r\n      updatedAt: true,\r\n      groups: true,\r\n      integrators: true,\r\n      cameras: true,\r\n      customers: true,\r\n      sites: true,\r\n    },\r\n  });\r\n\r\n  const updated_users = await Promise.all(\r\n    users.map(async (user) => {\r\n      const user_id = user.user_id;\r\n      const camera_count_query = await prisma.$queryRaw(`SELECT c.camera_id\r\n      FROM  \"_camerasTousers\" cu\r\n      JOIN  cameras c ON cu.\"A\" = c.camera_id\r\n      JOIN  users u ON cu.\"B\" = u.user_id\r\n      WHERE u.user_id::text = '${user_id}'\r\n      GROUP BY c.camera_id;`);\r\n\r\n      const customer_count_query = await prisma.$queryRaw(`SELECT c.customer_id\r\n      FROM  \"_customersTousers\" cu\r\n      JOIN  customers c ON cu.\"A\" = c.customer_id\r\n      JOIN  users u ON cu.\"B\" = u.user_id\r\n      WHERE u.user_id::text = '${user_id}'\r\n      GROUP BY c.customer_id;`);\r\n\r\n      const site_count_query = await prisma.$queryRaw(`SELECT s.site_id\r\n      FROM  \"_sitesTousers\" su\r\n      JOIN  sites s ON su.\"A\" = s.site_id\r\n      JOIN  users u ON su.\"B\" = u.user_id\r\n      WHERE u.user_id::text = '${user_id}'\r\n      GROUP BY s.site_id;`);\r\n\r\n      const camera_count = camera_count_query.length;\r\n      const customer_count = customer_count_query.length;\r\n      const site_count = site_count_query.length;\r\n\r\n      return {\r\n        ...user,\r\n        camera_count,\r\n        customer_count,\r\n        site_count,\r\n      };\r\n    })\r\n  );\r\n\r\n  return formatJSONResponseStatusOk({\r\n    users: updated_users,\r\n  });\r\n};\r\n\r\n// Update User\r\nconst updateUser: ValidatedEventAPIGatewayProxyEvent<typeof schema> = async (\r\n  event\r\n) => {\r\n  if (!event.pathParameters || !event.pathParameters.userId) {\r\n    return formatJSONResponseStatusBadRequest({\r\n      message: constants.USER_PATHPARAMETERS_ERROR,\r\n    });\r\n  }\r\n  const user = { ...event.body };\r\n  const user_id = event.pathParameters.userId;\r\n  try {\r\n    await prisma.users.update({\r\n      where: {\r\n        user_id,\r\n      },\r\n      data: user,\r\n    });\r\n    return formatJSONResponseStatusOk({\r\n      message: constants.USER_UPDATE,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n// Remove the users.\r\nconst removeUser = async (event) => {\r\n  if (!event.pathParameters || !event.pathParameters.userId) {\r\n    return formatJSONResponseStatusBadRequest({\r\n      message: constants.USER_PATHPARAMETERS_ERROR,\r\n    });\r\n  }\r\n  const user_id = event.pathParameters.userId;\r\n  try {\r\n    await prisma.users.delete({\r\n      where: {\r\n        user_id,\r\n      },\r\n    });\r\n    return formatJSONResponseStatusOk({\r\n      message: constants.USER_DELETE,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\nexport const addUser = middyfy(addNewUser);\r\nexport const getUserById = middyfy(findUserById);\r\nexport const getAllUsers = middyfy(findAllUsers);\r\nexport const editUser = middyfy(updateUser);\r\nexport const deleteUser = middyfy(removeUser);\r\n"],"sourceRoot":""}