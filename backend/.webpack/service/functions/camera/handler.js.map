{"version":3,"sources":["webpack://ts-sequelize-exp/./libs/apiGateway.ts","webpack://ts-sequelize-exp/./libs/constants.ts","webpack://ts-sequelize-exp/./libs/lambda.ts","webpack://ts-sequelize-exp/external \"@middy/core\"","webpack://ts-sequelize-exp/external \"@middy/http-json-body-parser\"","webpack://ts-sequelize-exp/external \"@prisma/client\"","webpack://ts-sequelize-exp/webpack/bootstrap","webpack://ts-sequelize-exp/webpack/runtime/compat get default export","webpack://ts-sequelize-exp/webpack/runtime/define property getters","webpack://ts-sequelize-exp/webpack/runtime/hasOwnProperty shorthand","webpack://ts-sequelize-exp/webpack/runtime/make namespace object","webpack://ts-sequelize-exp/./functions/camera/handler.ts"],"names":["formatJSONResponseStatusOk","response","statusCode","body","JSON","stringify","headers","formatJSONResponseStatusCreated","formatJSONResponseStatusBadRequest","formatJSONResponseStatusServerError","INTEGRATOR_SAVE","INTEGRATOR_UPDATE","INTEGRATOR_DELETE","INTEGRATOR_NOT_FOUND","INTEGRATOR_PATHPARAMETERS_ERROR","GROUP_SAVE","GROUP_UPDATE","GROUP_DELETE","GROUP_NOT_FOUND","GROUP_PATHPARAMETERS_ERROR","GROUP_ID_NOT_PROVIDED_ERROR","SITE_SAVE","SITE_UPDATE","SITE_DELETE","SITE_NOT_FOUND","SITE_PATHPARAMETERS_ERROR","SITE_ID_NOT_PROVIDED_ERROR","USER_SAVE","USER_UPDATE","USER_DELETE","USER_NOT_FOUND","USER_PATHPARAMETERS_ERROR","USER_ID_NOT_PROVIDED_ERROR","CUSTOMER_SAVE","CUSTOMER_UPDATE","CUSTOMER_DELETE","CUSTOMER_NOT_FOUND","CUSTOMER_PATHPARAMETERS_ERROR","CUSTOMER_ID_NOT_PROVIDED_ERROR","CAMERA_SAVE","CAMERA_UPDATE","CAMERA_DELETE","CAMERA_NOT_FOUND","CAMERA_PATHPARAMETERS_ERROR","CAMERA_ID_NOT_PROVIDED_ERROR","SERVER_ERROR","middyfy","handler","use","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","prisma","PrismaClient","addCamera","async","event","console","log","camera_name","smtp_user_name","smtp_password","group_id","integrator_id","camera_ip","camera","cameras","create","data","message","error","getCameraById","pathParameters","cameraId","camera_id","findUnique","where","select","is_disabled","groups","sites","integrators","users","total_request","getAllCameras","findMany","new_camera","map","editCamera","update","editDisableCamera","deleteCamera","delete"],"mappings":"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","file":"functions/camera/handler.js","sourcesContent":["import type {\r\n  APIGatewayProxyEvent,\r\n  APIGatewayProxyResult,\r\n  Handler,\r\n} from \"aws-lambda\";\r\nimport type { FromSchema } from \"json-schema-to-ts\";\r\n\r\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, \"body\"> & {\r\n  body: FromSchema<S>;\r\n};\r\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<\r\n  ValidatedAPIGatewayProxyEvent<S>,\r\n  APIGatewayProxyResult\r\n>;\r\n\r\nexport const formatJSONResponseStatusOk = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 200,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET,PUT,DELETE,PATCH\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const formatJSONResponseStatusCreated = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 201,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET,PUT,DELETE,PATCH\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const formatJSONResponseStatusBadRequest = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 400,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET,PUT,DELETE,PATCH\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const formatJSONResponseStatusNotFound = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 404,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET,PUT,DELETE,PATCH\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const formatJSONResponseStatusServerError = (\r\n  response: Record<string, unknown>\r\n) => {\r\n  return {\r\n    statusCode: 500,\r\n    body: JSON.stringify(response),\r\n    headers: {\r\n      \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET,PUT,DELETE,PATCH\",\r\n    },\r\n  };\r\n};\r\n","export default {\r\n  INTEGRATOR_SAVE: \"Integrator Saved Successfully.\",\r\n  INTEGRATOR_UPDATE: \"Integrator Updated Successfully.\",\r\n  INTEGRATOR_DELETE: \"Integrator Deleted Successfully.\",\r\n  INTEGRATOR_NOT_FOUND: \"Integrator not found with the given ID.\",\r\n  INTEGRATOR_PATHPARAMETERS_ERROR: \"Please provide Integrator ID.\",\r\n  GROUP_SAVE: \"Group Saved Successfully.\",\r\n  GROUP_UPDATE: \"Group Updated Successfully.\",\r\n  GROUP_DELETE: \"Group Deleted Successfully.\",\r\n  GROUP_NOT_FOUND: \"Group not found with the given ID.\",\r\n  GROUP_PATHPARAMETERS_ERROR: \"Please provide Group ID.\",\r\n  GROUP_ID_NOT_PROVIDED_ERROR: \"Please provide Group IDs.\",\r\n  SITE_SAVE: \"Site Saved Successfully.\",\r\n  SITE_UPDATE: \"Site Updated Successfully.\",\r\n  SITE_DELETE: \"Site Deleted Successfully.\",\r\n  SITE_NOT_FOUND: \"Site not found with the given ID.\",\r\n  SITE_PATHPARAMETERS_ERROR: \"Please provide Site ID.\",\r\n  SITE_ID_NOT_PROVIDED_ERROR: \"Please provide Site IDs.\",\r\n  USER_SAVE: \"User Saved Successfully.\",\r\n  USER_UPDATE: \"User Updated Successfully.\",\r\n  USER_DELETE: \"User Deleted Successfully.\",\r\n  USER_NOT_FOUND: \"User not found with the given ID.\",\r\n  USER_PATHPARAMETERS_ERROR: \"Please provide User ID.\",\r\n  USER_ID_NOT_PROVIDED_ERROR: \"Please provide User IDs.\",\r\n  CUSTOMER_SAVE: \"Customer Saved Successfully.\",\r\n  CUSTOMER_UPDATE: \"Customer Updated Successfully.\",\r\n  CUSTOMER_DELETE: \"Customer Deleted Successfully.\",\r\n  CUSTOMER_NOT_FOUND: \"Customer not found with the given ID.\",\r\n  CUSTOMER_PATHPARAMETERS_ERROR: \"Please provide Customer ID.\",\r\n  CUSTOMER_ID_NOT_PROVIDED_ERROR: \"Please provide Customer IDs.\",\r\n  CAMERA_SAVE: \"Camera Saved Successfully.\",\r\n  CAMERA_UPDATE: \"Camera Updated Successfully.\",\r\n  CAMERA_DELETE: \"Camera Deleted Successfully.\",\r\n  CAMERA_NOT_FOUND: \"Camera not found with the given ID.\",\r\n  CAMERA_PATHPARAMETERS_ERROR: \"Please provide Camera ID.\",\r\n  CAMERA_ID_NOT_PROVIDED_ERROR: \"Please provide Camera IDs.\",\r\n  SERVER_ERROR: \"Internal Server Error occured.\",\r\n};\r\n","import middy from \"@middy/core\";\r\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\";\r\n\r\nexport const middyfy = (handler: any) => {\r\n  return middy(handler).use(middyJsonBodyParser());\r\n};\r\n","module.exports = require(\"@middy/core\");;","module.exports = require(\"@middy/http-json-body-parser\");;","module.exports = require(\"@prisma/client\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import schema from \"./schema\";\r\nimport {\r\n  formatJSONResponseStatusBadRequest,\r\n  formatJSONResponseStatusCreated,\r\n  formatJSONResponseStatusOk,\r\n  formatJSONResponseStatusServerError,\r\n  ValidatedEventAPIGatewayProxyEvent,\r\n} from \"@libs/apiGateway\";\r\nimport { middyfy } from \"@libs/lambda\";\r\nimport constants from \"@libs/constants\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Add a new Camera\r\nconst addNewCamera: ValidatedEventAPIGatewayProxyEvent<typeof schema> = async (\r\n  event: any\r\n) => {\r\n  try {\r\n    console.log(event.body);\r\n\r\n    const {\r\n      camera_name,\r\n      smtp_user_name,\r\n      smtp_password,\r\n      group_id,\r\n      integrator_id,\r\n    } = event.body;\r\n\r\n    if (event.body.camera_ip) {\r\n      const camera = await prisma.cameras.create({\r\n        data: {\r\n          camera_name,\r\n          camera_ip: event.body.camera_ip,\r\n          smtp_user_name,\r\n          smtp_password,\r\n          group_id,\r\n          integrator_id,\r\n        },\r\n      });\r\n      return formatJSONResponseStatusCreated({\r\n        message: constants.CAMERA_SAVE,\r\n        camera,\r\n      });\r\n    }\r\n\r\n    // if (event.body.user_ids) {\r\n    //   const users = event.body.user_ids.map(\r\n    //     async (user_id: string) =>\r\n    //       await prisma.users.findUnique({ where: { user_id } })\r\n    //   );\r\n    //   const camera = await prisma.cameras.create({\r\n    //     data: {\r\n    //       camera_name,\r\n    //       smtp_user_name,\r\n    //       smtp_password,\r\n    //       group_id,\r\n    //       integrator_id,\r\n    //       users: {\r\n    //         create: users,\r\n    //       },\r\n    //     },\r\n    //   });\r\n    //   return formatJSONResponseStatusCreated({\r\n    //     message: constants.CAMERA_SAVE,\r\n    //     camera,\r\n    //   });\r\n    // }\r\n\r\n    const camera = await prisma.cameras.create({\r\n      data: {\r\n        camera_name,\r\n        smtp_user_name,\r\n        smtp_password,\r\n        group_id,\r\n        integrator_id,\r\n      },\r\n    });\r\n    return formatJSONResponseStatusCreated({\r\n      message: constants.CAMERA_SAVE,\r\n      camera,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n// Find an Camera by ID.\r\nconst findCameraById = async (event) => {\r\n  if (!event.pathParameters || !event.pathParameters.cameraId) {\r\n    return formatJSONResponseStatusBadRequest({\r\n      message: constants.CAMERA_PATHPARAMETERS_ERROR,\r\n    });\r\n  }\r\n  const camera_id = event.pathParameters.cameraId;\r\n  try {\r\n    const camera = await prisma.cameras.findUnique({\r\n      where: {\r\n        camera_id,\r\n      },\r\n      select: {\r\n        camera_id: true,\r\n        camera_name: true,\r\n        smtp_user_name: true,\r\n        smtp_password: true,\r\n        is_disabled: true,\r\n        groups: true,\r\n        sites: true,\r\n        integrators: true,\r\n        users: true,\r\n      },\r\n    });\r\n\r\n    console.log({ ...camera });\r\n\r\n    return formatJSONResponseStatusOk({\r\n      camera: {\r\n        ...camera,\r\n        total_request: 0,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n// Find All camera details\r\nconst findAllCameras = async () => {\r\n  const cameras = await prisma.cameras.findMany({\r\n    select: {\r\n      camera_id: true,\r\n      camera_name: true,\r\n      smtp_user_name: true,\r\n      smtp_password: true,\r\n      is_disabled: true,\r\n      groups: true,\r\n      sites: true,\r\n      integrators: true,\r\n      users: true,\r\n    },\r\n  });\r\n  console.log({ ...cameras });\r\n  const new_camera = cameras.map((camera) => {\r\n    return { ...camera, total_request: 0 };\r\n  });\r\n  console.log({ ...new_camera });\r\n  return formatJSONResponseStatusOk({\r\n    cameras: new_camera,\r\n  });\r\n};\r\n\r\n// Update Camera\r\nconst updateCamera: ValidatedEventAPIGatewayProxyEvent<typeof schema> = async (\r\n  event\r\n) => {\r\n  if (!event.pathParameters || !event.pathParameters.cameraId) {\r\n    return formatJSONResponseStatusBadRequest({\r\n      message: constants.CAMERA_PATHPARAMETERS_ERROR,\r\n    });\r\n  }\r\n  const {\r\n    camera_name,\r\n    smtp_user_name,\r\n    smtp_password,\r\n    group_id,\r\n    integrator_id,\r\n  } = event.body;\r\n  const camera_id = event.pathParameters.cameraId;\r\n\r\n  if (event.body.camera_ip) {\r\n    const camera = await prisma.cameras.create({\r\n      data: {\r\n        camera_name,\r\n        camera_ip: event.body.camera_ip,\r\n        smtp_user_name,\r\n        smtp_password,\r\n        group_id,\r\n        integrator_id,\r\n      },\r\n    });\r\n    return formatJSONResponseStatusCreated({\r\n      message: constants.CAMERA_SAVE,\r\n      camera,\r\n    });\r\n  }\r\n\r\n  try {\r\n    await prisma.cameras.update({\r\n      where: {\r\n        camera_id,\r\n      },\r\n      data: {\r\n        camera_name,\r\n        smtp_user_name,\r\n        smtp_password,\r\n        group_id,\r\n        integrator_id,\r\n      },\r\n    });\r\n    return formatJSONResponseStatusOk({\r\n      message: constants.CAMERA_UPDATE,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n// Update is_disiable\r\nconst disiableCamera = async (event) => {\r\n  if (!event.pathParameters || !event.pathParameters.cameraId) {\r\n    return formatJSONResponseStatusBadRequest({\r\n      message: constants.CAMERA_PATHPARAMETERS_ERROR,\r\n    });\r\n  }\r\n\r\n  const camera_id = event.pathParameters.cameraId;\r\n  const { is_disabled } = event.body;\r\n\r\n  try {\r\n    await prisma.cameras.update({\r\n      where: {\r\n        camera_id,\r\n      },\r\n      data: { is_disabled },\r\n    });\r\n    return formatJSONResponseStatusOk({\r\n      message: constants.CAMERA_UPDATE,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n// Remove the cameras.\r\nconst removeCamera = async (event) => {\r\n  if (!event.pathParameters || !event.pathParameters.cameraId) {\r\n    return formatJSONResponseStatusBadRequest({\r\n      message: constants.CAMERA_PATHPARAMETERS_ERROR,\r\n    });\r\n  }\r\n  const camera_id = event.pathParameters.cameraId;\r\n  try {\r\n    await prisma.cameras.delete({\r\n      where: {\r\n        camera_id,\r\n      },\r\n    });\r\n    return formatJSONResponseStatusOk({\r\n      message: constants.CAMERA_DELETE,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return formatJSONResponseStatusServerError({\r\n      message: constants.SERVER_ERROR,\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\nexport const addCamera = middyfy(addNewCamera);\r\nexport const getCameraById = middyfy(findCameraById);\r\nexport const getAllCameras = middyfy(findAllCameras);\r\nexport const editCamera = middyfy(updateCamera);\r\nexport const editDisableCamera = middyfy(disiableCamera);\r\nexport const deleteCamera = middyfy(removeCamera);\r\n"],"sourceRoot":""}