
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model cameras
 */

export type cameras = {
  camera_id: string
  camera_name: string | null
  change_name: string | null
  camera_ip: string | null
  total_request: number | null
  smtp_user_name: string | null
  smtp_password: string | null
  group_id: string | null
  site_id: string | null
  integrator_id: string | null
  email: string | null
  is_disabled: boolean | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model customers
 */

export type customers = {
  customer_id: string
  customer_name: string | null
  change_name: string | null
  is_disabled: boolean | null
  group_id: string | null
  integrator_id: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model groups
 */

export type groups = {
  group_id: string
  group_name: string | null
  change_name: string | null
  is_disabled: boolean | null
  integrator_id: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model integrators
 */

export type integrators = {
  integrator_id: string
  name: string | null
  email: string | null
  phone: string | null
  is_disabled: boolean | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model sites
 */

export type sites = {
  site_id: string
  site_name: string | null
  change_name: string | null
  is_disabled: boolean | null
  group_id: string | null
  integrator_id: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model users
 */

export type users = {
  user_id: string
  group_id: string | null
  integrator_id: string | null
  user_name: string | null
  change_name: string | null
  user_email: string | null
  is_disabled: boolean | null
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cameras
 * const cameras = await prisma.cameras.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cameras
   * const cameras = await prisma.cameras.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.cameras`: Exposes CRUD operations for the **cameras** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cameras
    * const cameras = await prisma.cameras.findMany()
    * ```
    */
  get cameras(): Prisma.camerasDelegate<GlobalReject>;

  /**
   * `prisma.customers`: Exposes CRUD operations for the **customers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customers.findMany()
    * ```
    */
  get customers(): Prisma.customersDelegate<GlobalReject>;

  /**
   * `prisma.groups`: Exposes CRUD operations for the **groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.groups.findMany()
    * ```
    */
  get groups(): Prisma.groupsDelegate<GlobalReject>;

  /**
   * `prisma.integrators`: Exposes CRUD operations for the **integrators** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Integrators
    * const integrators = await prisma.integrators.findMany()
    * ```
    */
  get integrators(): Prisma.integratorsDelegate<GlobalReject>;

  /**
   * `prisma.sites`: Exposes CRUD operations for the **sites** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.sites.findMany()
    * ```
    */
  get sites(): Prisma.sitesDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.24.1
   * Query Engine version: f3e341280d96d0abc068f97e959ddf01f321a858
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    cameras: 'cameras',
    customers: 'customers',
    groups: 'groups',
    integrators: 'integrators',
    sites: 'sites',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model cameras
   */


  export type AggregateCameras = {
    _count: CamerasCountAggregateOutputType | null
    count: CamerasCountAggregateOutputType | null
    _avg: CamerasAvgAggregateOutputType | null
    avg: CamerasAvgAggregateOutputType | null
    _sum: CamerasSumAggregateOutputType | null
    sum: CamerasSumAggregateOutputType | null
    _min: CamerasMinAggregateOutputType | null
    min: CamerasMinAggregateOutputType | null
    _max: CamerasMaxAggregateOutputType | null
    max: CamerasMaxAggregateOutputType | null
  }

  export type CamerasAvgAggregateOutputType = {
    total_request: number | null
  }

  export type CamerasSumAggregateOutputType = {
    total_request: number | null
  }

  export type CamerasMinAggregateOutputType = {
    camera_id: string | null
    camera_name: string | null
    change_name: string | null
    camera_ip: string | null
    total_request: number | null
    smtp_user_name: string | null
    smtp_password: string | null
    group_id: string | null
    site_id: string | null
    integrator_id: string | null
    email: string | null
    is_disabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CamerasMaxAggregateOutputType = {
    camera_id: string | null
    camera_name: string | null
    change_name: string | null
    camera_ip: string | null
    total_request: number | null
    smtp_user_name: string | null
    smtp_password: string | null
    group_id: string | null
    site_id: string | null
    integrator_id: string | null
    email: string | null
    is_disabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CamerasCountAggregateOutputType = {
    camera_id: number
    camera_name: number
    change_name: number
    camera_ip: number
    total_request: number
    smtp_user_name: number
    smtp_password: number
    group_id: number
    site_id: number
    integrator_id: number
    email: number
    is_disabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CamerasAvgAggregateInputType = {
    total_request?: true
  }

  export type CamerasSumAggregateInputType = {
    total_request?: true
  }

  export type CamerasMinAggregateInputType = {
    camera_id?: true
    camera_name?: true
    change_name?: true
    camera_ip?: true
    total_request?: true
    smtp_user_name?: true
    smtp_password?: true
    group_id?: true
    site_id?: true
    integrator_id?: true
    email?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CamerasMaxAggregateInputType = {
    camera_id?: true
    camera_name?: true
    change_name?: true
    camera_ip?: true
    total_request?: true
    smtp_user_name?: true
    smtp_password?: true
    group_id?: true
    site_id?: true
    integrator_id?: true
    email?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CamerasCountAggregateInputType = {
    camera_id?: true
    camera_name?: true
    change_name?: true
    camera_ip?: true
    total_request?: true
    smtp_user_name?: true
    smtp_password?: true
    group_id?: true
    site_id?: true
    integrator_id?: true
    email?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CamerasAggregateArgs = {
    /**
     * Filter which cameras to aggregate.
     * 
    **/
    where?: camerasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cameras to fetch.
     * 
    **/
    orderBy?: Enumerable<camerasOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: camerasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cameras from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cameras.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cameras
    **/
    _count?: true | CamerasCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CamerasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CamerasAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: CamerasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CamerasSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: CamerasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CamerasMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CamerasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CamerasMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CamerasMaxAggregateInputType
  }

  export type GetCamerasAggregateType<T extends CamerasAggregateArgs> = {
        [P in keyof T & keyof AggregateCameras]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCameras[P]>
      : GetScalarType<T[P], AggregateCameras[P]>
  }


    
    
  export type CamerasGroupByArgs = {
    where?: camerasWhereInput
    orderBy?: Enumerable<camerasOrderByInput>
    by: Array<CamerasScalarFieldEnum>
    having?: camerasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CamerasCountAggregateInputType | true
    _avg?: CamerasAvgAggregateInputType
    _sum?: CamerasSumAggregateInputType
    _min?: CamerasMinAggregateInputType
    _max?: CamerasMaxAggregateInputType
  }


  export type CamerasGroupByOutputType = {
    camera_id: string
    camera_name: string | null
    change_name: string | null
    camera_ip: string | null
    total_request: number | null
    smtp_user_name: string | null
    smtp_password: string | null
    group_id: string | null
    site_id: string | null
    integrator_id: string | null
    email: string | null
    is_disabled: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: CamerasCountAggregateOutputType | null
    _avg: CamerasAvgAggregateOutputType | null
    _sum: CamerasSumAggregateOutputType | null
    _min: CamerasMinAggregateOutputType | null
    _max: CamerasMaxAggregateOutputType | null
  }

  type GetCamerasGroupByPayload<T extends CamerasGroupByArgs> = Promise<
    Array<
      PickArray<CamerasGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CamerasGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CamerasGroupByOutputType[P]> 
            : GetScalarType<T[P], CamerasGroupByOutputType[P]>
        }
      > 
    >


  export type camerasSelect = {
    camera_id?: boolean
    camera_name?: boolean
    change_name?: boolean
    camera_ip?: boolean
    total_request?: boolean
    smtp_user_name?: boolean
    smtp_password?: boolean
    group_id?: boolean
    site_id?: boolean
    integrator_id?: boolean
    email?: boolean
    is_disabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    groups?: boolean | groupsArgs
    integrators?: boolean | integratorsArgs
    sites?: boolean | sitesArgs
    users?: boolean | usersFindManyArgs
  }

  export type camerasInclude = {
    groups?: boolean | groupsArgs
    integrators?: boolean | integratorsArgs
    sites?: boolean | sitesArgs
    users?: boolean | usersFindManyArgs
  }

  export type camerasGetPayload<
    S extends boolean | null | undefined | camerasArgs,
    U = keyof S
      > = S extends true
        ? cameras
    : S extends undefined
    ? never
    : S extends camerasArgs | camerasFindManyArgs
    ?'include' extends U
    ? cameras  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'groups'
        ? groupsGetPayload<S['include'][P]> | null :
        P extends 'integrators'
        ? integratorsGetPayload<S['include'][P]> | null :
        P extends 'sites'
        ? sitesGetPayload<S['include'][P]> | null :
        P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof cameras ?cameras [P]
  : 
          P extends 'groups'
        ? groupsGetPayload<S['select'][P]> | null :
        P extends 'integrators'
        ? integratorsGetPayload<S['select'][P]> | null :
        P extends 'sites'
        ? sitesGetPayload<S['select'][P]> | null :
        P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  : never
  } 
    : cameras
  : cameras


  type camerasCountArgs = Merge<
    Omit<camerasFindManyArgs, 'select' | 'include'> & {
      select?: CamerasCountAggregateInputType | true
    }
  >

  export interface camerasDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cameras that matches the filter.
     * @param {camerasFindUniqueArgs} args - Arguments to find a Cameras
     * @example
     * // Get one Cameras
     * const cameras = await prisma.cameras.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends camerasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, camerasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cameras'> extends True ? CheckSelect<T, Prisma__camerasClient<cameras>, Prisma__camerasClient<camerasGetPayload<T>>> : CheckSelect<T, Prisma__camerasClient<cameras | null >, Prisma__camerasClient<camerasGetPayload<T> | null >>

    /**
     * Find the first Cameras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camerasFindFirstArgs} args - Arguments to find a Cameras
     * @example
     * // Get one Cameras
     * const cameras = await prisma.cameras.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends camerasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, camerasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cameras'> extends True ? CheckSelect<T, Prisma__camerasClient<cameras>, Prisma__camerasClient<camerasGetPayload<T>>> : CheckSelect<T, Prisma__camerasClient<cameras | null >, Prisma__camerasClient<camerasGetPayload<T> | null >>

    /**
     * Find zero or more Cameras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camerasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cameras
     * const cameras = await prisma.cameras.findMany()
     * 
     * // Get first 10 Cameras
     * const cameras = await prisma.cameras.findMany({ take: 10 })
     * 
     * // Only select the `camera_id`
     * const camerasWithCamera_idOnly = await prisma.cameras.findMany({ select: { camera_id: true } })
     * 
    **/
    findMany<T extends camerasFindManyArgs>(
      args?: SelectSubset<T, camerasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<cameras>>, PrismaPromise<Array<camerasGetPayload<T>>>>

    /**
     * Create a Cameras.
     * @param {camerasCreateArgs} args - Arguments to create a Cameras.
     * @example
     * // Create one Cameras
     * const Cameras = await prisma.cameras.create({
     *   data: {
     *     // ... data to create a Cameras
     *   }
     * })
     * 
    **/
    create<T extends camerasCreateArgs>(
      args: SelectSubset<T, camerasCreateArgs>
    ): CheckSelect<T, Prisma__camerasClient<cameras>, Prisma__camerasClient<camerasGetPayload<T>>>

    /**
     * Create many Cameras.
     *     @param {camerasCreateManyArgs} args - Arguments to create many Cameras.
     *     @example
     *     // Create many Cameras
     *     const cameras = await prisma.cameras.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends camerasCreateManyArgs>(
      args?: SelectSubset<T, camerasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cameras.
     * @param {camerasDeleteArgs} args - Arguments to delete one Cameras.
     * @example
     * // Delete one Cameras
     * const Cameras = await prisma.cameras.delete({
     *   where: {
     *     // ... filter to delete one Cameras
     *   }
     * })
     * 
    **/
    delete<T extends camerasDeleteArgs>(
      args: SelectSubset<T, camerasDeleteArgs>
    ): CheckSelect<T, Prisma__camerasClient<cameras>, Prisma__camerasClient<camerasGetPayload<T>>>

    /**
     * Update one Cameras.
     * @param {camerasUpdateArgs} args - Arguments to update one Cameras.
     * @example
     * // Update one Cameras
     * const cameras = await prisma.cameras.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends camerasUpdateArgs>(
      args: SelectSubset<T, camerasUpdateArgs>
    ): CheckSelect<T, Prisma__camerasClient<cameras>, Prisma__camerasClient<camerasGetPayload<T>>>

    /**
     * Delete zero or more Cameras.
     * @param {camerasDeleteManyArgs} args - Arguments to filter Cameras to delete.
     * @example
     * // Delete a few Cameras
     * const { count } = await prisma.cameras.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends camerasDeleteManyArgs>(
      args?: SelectSubset<T, camerasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cameras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camerasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cameras
     * const cameras = await prisma.cameras.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends camerasUpdateManyArgs>(
      args: SelectSubset<T, camerasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cameras.
     * @param {camerasUpsertArgs} args - Arguments to update or create a Cameras.
     * @example
     * // Update or create a Cameras
     * const cameras = await prisma.cameras.upsert({
     *   create: {
     *     // ... data to create a Cameras
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cameras we want to update
     *   }
     * })
    **/
    upsert<T extends camerasUpsertArgs>(
      args: SelectSubset<T, camerasUpsertArgs>
    ): CheckSelect<T, Prisma__camerasClient<cameras>, Prisma__camerasClient<camerasGetPayload<T>>>

    /**
     * Count the number of Cameras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {camerasCountArgs} args - Arguments to filter Cameras to count.
     * @example
     * // Count the number of Cameras
     * const count = await prisma.cameras.count({
     *   where: {
     *     // ... the filter for the Cameras we want to count
     *   }
     * })
    **/
    count<T extends camerasCountArgs>(
      args?: Subset<T, camerasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CamerasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cameras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CamerasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CamerasAggregateArgs>(args: Subset<T, CamerasAggregateArgs>): PrismaPromise<GetCamerasAggregateType<T>>

    /**
     * Group by Cameras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CamerasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CamerasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CamerasGroupByArgs['orderBy'] }
        : { orderBy?: CamerasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CamerasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCamerasGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for cameras.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__camerasClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends groupsArgs = {}>(args?: Subset<T, groupsArgs>): CheckSelect<T, Prisma__groupsClient<groups | null >, Prisma__groupsClient<groupsGetPayload<T> | null >>;

    integrators<T extends integratorsArgs = {}>(args?: Subset<T, integratorsArgs>): CheckSelect<T, Prisma__integratorsClient<integrators | null >, Prisma__integratorsClient<integratorsGetPayload<T> | null >>;

    sites<T extends sitesArgs = {}>(args?: Subset<T, sitesArgs>): CheckSelect<T, Prisma__sitesClient<sites | null >, Prisma__sitesClient<sitesGetPayload<T> | null >>;

    users<T extends usersFindManyArgs = {}>(args?: Subset<T, usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * cameras findUnique
   */
  export type camerasFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the cameras
     * 
    **/
    select?: camerasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camerasInclude | null
    /**
     * Throw an Error if a cameras can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which cameras to fetch.
     * 
    **/
    where: camerasWhereUniqueInput
  }


  /**
   * cameras findFirst
   */
  export type camerasFindFirstArgs = {
    /**
     * Select specific fields to fetch from the cameras
     * 
    **/
    select?: camerasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camerasInclude | null
    /**
     * Throw an Error if a cameras can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which cameras to fetch.
     * 
    **/
    where?: camerasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cameras to fetch.
     * 
    **/
    orderBy?: Enumerable<camerasOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cameras.
     * 
    **/
    cursor?: camerasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cameras from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cameras.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cameras.
     * 
    **/
    distinct?: Enumerable<CamerasScalarFieldEnum>
  }


  /**
   * cameras findMany
   */
  export type camerasFindManyArgs = {
    /**
     * Select specific fields to fetch from the cameras
     * 
    **/
    select?: camerasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camerasInclude | null
    /**
     * Filter, which cameras to fetch.
     * 
    **/
    where?: camerasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cameras to fetch.
     * 
    **/
    orderBy?: Enumerable<camerasOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cameras.
     * 
    **/
    cursor?: camerasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cameras from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cameras.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CamerasScalarFieldEnum>
  }


  /**
   * cameras create
   */
  export type camerasCreateArgs = {
    /**
     * Select specific fields to fetch from the cameras
     * 
    **/
    select?: camerasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camerasInclude | null
    /**
     * The data needed to create a cameras.
     * 
    **/
    data: XOR<camerasCreateInput, camerasUncheckedCreateInput>
  }


  /**
   * cameras createMany
   */
  export type camerasCreateManyArgs = {
    data: Enumerable<camerasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * cameras update
   */
  export type camerasUpdateArgs = {
    /**
     * Select specific fields to fetch from the cameras
     * 
    **/
    select?: camerasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camerasInclude | null
    /**
     * The data needed to update a cameras.
     * 
    **/
    data: XOR<camerasUpdateInput, camerasUncheckedUpdateInput>
    /**
     * Choose, which cameras to update.
     * 
    **/
    where: camerasWhereUniqueInput
  }


  /**
   * cameras updateMany
   */
  export type camerasUpdateManyArgs = {
    data: XOR<camerasUpdateManyMutationInput, camerasUncheckedUpdateManyInput>
    where?: camerasWhereInput
  }


  /**
   * cameras upsert
   */
  export type camerasUpsertArgs = {
    /**
     * Select specific fields to fetch from the cameras
     * 
    **/
    select?: camerasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camerasInclude | null
    /**
     * The filter to search for the cameras to update in case it exists.
     * 
    **/
    where: camerasWhereUniqueInput
    /**
     * In case the cameras found by the `where` argument doesn't exist, create a new cameras with this data.
     * 
    **/
    create: XOR<camerasCreateInput, camerasUncheckedCreateInput>
    /**
     * In case the cameras was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<camerasUpdateInput, camerasUncheckedUpdateInput>
  }


  /**
   * cameras delete
   */
  export type camerasDeleteArgs = {
    /**
     * Select specific fields to fetch from the cameras
     * 
    **/
    select?: camerasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camerasInclude | null
    /**
     * Filter which cameras to delete.
     * 
    **/
    where: camerasWhereUniqueInput
  }


  /**
   * cameras deleteMany
   */
  export type camerasDeleteManyArgs = {
    where?: camerasWhereInput
  }


  /**
   * cameras without action
   */
  export type camerasArgs = {
    /**
     * Select specific fields to fetch from the cameras
     * 
    **/
    select?: camerasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: camerasInclude | null
  }



  /**
   * Model customers
   */


  export type AggregateCustomers = {
    _count: CustomersCountAggregateOutputType | null
    count: CustomersCountAggregateOutputType | null
    _min: CustomersMinAggregateOutputType | null
    min: CustomersMinAggregateOutputType | null
    _max: CustomersMaxAggregateOutputType | null
    max: CustomersMaxAggregateOutputType | null
  }

  export type CustomersMinAggregateOutputType = {
    customer_id: string | null
    customer_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    group_id: string | null
    integrator_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomersMaxAggregateOutputType = {
    customer_id: string | null
    customer_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    group_id: string | null
    integrator_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomersCountAggregateOutputType = {
    customer_id: number
    customer_name: number
    change_name: number
    is_disabled: number
    group_id: number
    integrator_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomersMinAggregateInputType = {
    customer_id?: true
    customer_name?: true
    change_name?: true
    is_disabled?: true
    group_id?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomersMaxAggregateInputType = {
    customer_id?: true
    customer_name?: true
    change_name?: true
    is_disabled?: true
    group_id?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomersCountAggregateInputType = {
    customer_id?: true
    customer_name?: true
    change_name?: true
    is_disabled?: true
    group_id?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomersAggregateArgs = {
    /**
     * Filter which customers to aggregate.
     * 
    **/
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customers
    **/
    _count?: true | CustomersCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CustomersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomersMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CustomersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomersMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CustomersMaxAggregateInputType
  }

  export type GetCustomersAggregateType<T extends CustomersAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomers[P]>
      : GetScalarType<T[P], AggregateCustomers[P]>
  }


    
    
  export type CustomersGroupByArgs = {
    where?: customersWhereInput
    orderBy?: Enumerable<customersOrderByInput>
    by: Array<CustomersScalarFieldEnum>
    having?: customersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomersCountAggregateInputType | true
    _min?: CustomersMinAggregateInputType
    _max?: CustomersMaxAggregateInputType
  }


  export type CustomersGroupByOutputType = {
    customer_id: string
    customer_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    group_id: string | null
    integrator_id: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomersCountAggregateOutputType | null
    _min: CustomersMinAggregateOutputType | null
    _max: CustomersMaxAggregateOutputType | null
  }

  type GetCustomersGroupByPayload<T extends CustomersGroupByArgs> = Promise<
    Array<
      PickArray<CustomersGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CustomersGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CustomersGroupByOutputType[P]> 
            : GetScalarType<T[P], CustomersGroupByOutputType[P]>
        }
      > 
    >


  export type customersSelect = {
    customer_id?: boolean
    customer_name?: boolean
    change_name?: boolean
    is_disabled?: boolean
    group_id?: boolean
    integrator_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    groups?: boolean | groupsArgs
    integrators?: boolean | integratorsArgs
    sites?: boolean | sitesFindManyArgs
    users?: boolean | usersFindManyArgs
  }

  export type customersInclude = {
    groups?: boolean | groupsArgs
    integrators?: boolean | integratorsArgs
    sites?: boolean | sitesFindManyArgs
    users?: boolean | usersFindManyArgs
  }

  export type customersGetPayload<
    S extends boolean | null | undefined | customersArgs,
    U = keyof S
      > = S extends true
        ? customers
    : S extends undefined
    ? never
    : S extends customersArgs | customersFindManyArgs
    ?'include' extends U
    ? customers  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'groups'
        ? groupsGetPayload<S['include'][P]> | null :
        P extends 'integrators'
        ? integratorsGetPayload<S['include'][P]> | null :
        P extends 'sites'
        ? Array < sitesGetPayload<S['include'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof customers ?customers [P]
  : 
          P extends 'groups'
        ? groupsGetPayload<S['select'][P]> | null :
        P extends 'integrators'
        ? integratorsGetPayload<S['select'][P]> | null :
        P extends 'sites'
        ? Array < sitesGetPayload<S['select'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  : never
  } 
    : customers
  : customers


  type customersCountArgs = Merge<
    Omit<customersFindManyArgs, 'select' | 'include'> & {
      select?: CustomersCountAggregateInputType | true
    }
  >

  export interface customersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Customers that matches the filter.
     * @param {customersFindUniqueArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customers'> extends True ? CheckSelect<T, Prisma__customersClient<customers>, Prisma__customersClient<customersGetPayload<T>>> : CheckSelect<T, Prisma__customersClient<customers | null >, Prisma__customersClient<customersGetPayload<T> | null >>

    /**
     * Find the first Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersFindFirstArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customers'> extends True ? CheckSelect<T, Prisma__customersClient<customers>, Prisma__customersClient<customersGetPayload<T>>> : CheckSelect<T, Prisma__customersClient<customers | null >, Prisma__customersClient<customersGetPayload<T> | null >>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customers.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customers.findMany({ take: 10 })
     * 
     * // Only select the `customer_id`
     * const customersWithCustomer_idOnly = await prisma.customers.findMany({ select: { customer_id: true } })
     * 
    **/
    findMany<T extends customersFindManyArgs>(
      args?: SelectSubset<T, customersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<customers>>, PrismaPromise<Array<customersGetPayload<T>>>>

    /**
     * Create a Customers.
     * @param {customersCreateArgs} args - Arguments to create a Customers.
     * @example
     * // Create one Customers
     * const Customers = await prisma.customers.create({
     *   data: {
     *     // ... data to create a Customers
     *   }
     * })
     * 
    **/
    create<T extends customersCreateArgs>(
      args: SelectSubset<T, customersCreateArgs>
    ): CheckSelect<T, Prisma__customersClient<customers>, Prisma__customersClient<customersGetPayload<T>>>

    /**
     * Create many Customers.
     *     @param {customersCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customers = await prisma.customers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customersCreateManyArgs>(
      args?: SelectSubset<T, customersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Customers.
     * @param {customersDeleteArgs} args - Arguments to delete one Customers.
     * @example
     * // Delete one Customers
     * const Customers = await prisma.customers.delete({
     *   where: {
     *     // ... filter to delete one Customers
     *   }
     * })
     * 
    **/
    delete<T extends customersDeleteArgs>(
      args: SelectSubset<T, customersDeleteArgs>
    ): CheckSelect<T, Prisma__customersClient<customers>, Prisma__customersClient<customersGetPayload<T>>>

    /**
     * Update one Customers.
     * @param {customersUpdateArgs} args - Arguments to update one Customers.
     * @example
     * // Update one Customers
     * const customers = await prisma.customers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customersUpdateArgs>(
      args: SelectSubset<T, customersUpdateArgs>
    ): CheckSelect<T, Prisma__customersClient<customers>, Prisma__customersClient<customersGetPayload<T>>>

    /**
     * Delete zero or more Customers.
     * @param {customersDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customersDeleteManyArgs>(
      args?: SelectSubset<T, customersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customers = await prisma.customers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customersUpdateManyArgs>(
      args: SelectSubset<T, customersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Customers.
     * @param {customersUpsertArgs} args - Arguments to update or create a Customers.
     * @example
     * // Update or create a Customers
     * const customers = await prisma.customers.upsert({
     *   create: {
     *     // ... data to create a Customers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customers we want to update
     *   }
     * })
    **/
    upsert<T extends customersUpsertArgs>(
      args: SelectSubset<T, customersUpsertArgs>
    ): CheckSelect<T, Prisma__customersClient<customers>, Prisma__customersClient<customersGetPayload<T>>>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customers.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends customersCountArgs>(
      args?: Subset<T, customersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomersAggregateArgs>(args: Subset<T, CustomersAggregateArgs>): PrismaPromise<GetCustomersAggregateType<T>>

    /**
     * Group by Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomersGroupByArgs['orderBy'] }
        : { orderBy?: CustomersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for customers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends groupsArgs = {}>(args?: Subset<T, groupsArgs>): CheckSelect<T, Prisma__groupsClient<groups | null >, Prisma__groupsClient<groupsGetPayload<T> | null >>;

    integrators<T extends integratorsArgs = {}>(args?: Subset<T, integratorsArgs>): CheckSelect<T, Prisma__integratorsClient<integrators | null >, Prisma__integratorsClient<integratorsGetPayload<T> | null >>;

    sites<T extends sitesFindManyArgs = {}>(args?: Subset<T, sitesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sites>>, PrismaPromise<Array<sitesGetPayload<T>>>>;

    users<T extends usersFindManyArgs = {}>(args?: Subset<T, usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * customers findUnique
   */
  export type customersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the customers
     * 
    **/
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customersInclude | null
    /**
     * Throw an Error if a customers can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which customers to fetch.
     * 
    **/
    where: customersWhereUniqueInput
  }


  /**
   * customers findFirst
   */
  export type customersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the customers
     * 
    **/
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customersInclude | null
    /**
     * Throw an Error if a customers can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which customers to fetch.
     * 
    **/
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     * 
    **/
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     * 
    **/
    distinct?: Enumerable<CustomersScalarFieldEnum>
  }


  /**
   * customers findMany
   */
  export type customersFindManyArgs = {
    /**
     * Select specific fields to fetch from the customers
     * 
    **/
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customersInclude | null
    /**
     * Filter, which customers to fetch.
     * 
    **/
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customers.
     * 
    **/
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CustomersScalarFieldEnum>
  }


  /**
   * customers create
   */
  export type customersCreateArgs = {
    /**
     * Select specific fields to fetch from the customers
     * 
    **/
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customersInclude | null
    /**
     * The data needed to create a customers.
     * 
    **/
    data: XOR<customersCreateInput, customersUncheckedCreateInput>
  }


  /**
   * customers createMany
   */
  export type customersCreateManyArgs = {
    data: Enumerable<customersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customers update
   */
  export type customersUpdateArgs = {
    /**
     * Select specific fields to fetch from the customers
     * 
    **/
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customersInclude | null
    /**
     * The data needed to update a customers.
     * 
    **/
    data: XOR<customersUpdateInput, customersUncheckedUpdateInput>
    /**
     * Choose, which customers to update.
     * 
    **/
    where: customersWhereUniqueInput
  }


  /**
   * customers updateMany
   */
  export type customersUpdateManyArgs = {
    data: XOR<customersUpdateManyMutationInput, customersUncheckedUpdateManyInput>
    where?: customersWhereInput
  }


  /**
   * customers upsert
   */
  export type customersUpsertArgs = {
    /**
     * Select specific fields to fetch from the customers
     * 
    **/
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customersInclude | null
    /**
     * The filter to search for the customers to update in case it exists.
     * 
    **/
    where: customersWhereUniqueInput
    /**
     * In case the customers found by the `where` argument doesn't exist, create a new customers with this data.
     * 
    **/
    create: XOR<customersCreateInput, customersUncheckedCreateInput>
    /**
     * In case the customers was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<customersUpdateInput, customersUncheckedUpdateInput>
  }


  /**
   * customers delete
   */
  export type customersDeleteArgs = {
    /**
     * Select specific fields to fetch from the customers
     * 
    **/
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customersInclude | null
    /**
     * Filter which customers to delete.
     * 
    **/
    where: customersWhereUniqueInput
  }


  /**
   * customers deleteMany
   */
  export type customersDeleteManyArgs = {
    where?: customersWhereInput
  }


  /**
   * customers without action
   */
  export type customersArgs = {
    /**
     * Select specific fields to fetch from the customers
     * 
    **/
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customersInclude | null
  }



  /**
   * Model groups
   */


  export type AggregateGroups = {
    _count: GroupsCountAggregateOutputType | null
    count: GroupsCountAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
    max: GroupsMaxAggregateOutputType | null
  }

  export type GroupsMinAggregateOutputType = {
    group_id: string | null
    group_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    integrator_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupsMaxAggregateOutputType = {
    group_id: string | null
    group_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    integrator_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupsCountAggregateOutputType = {
    group_id: number
    group_name: number
    change_name: number
    is_disabled: number
    integrator_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupsMinAggregateInputType = {
    group_id?: true
    group_name?: true
    change_name?: true
    is_disabled?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupsMaxAggregateInputType = {
    group_id?: true
    group_name?: true
    change_name?: true
    is_disabled?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupsCountAggregateInputType = {
    group_id?: true
    group_name?: true
    change_name?: true
    is_disabled?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupsAggregateArgs = {
    /**
     * Filter which groups to aggregate.
     * 
    **/
    where?: groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     * 
    **/
    orderBy?: Enumerable<groupsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groups
    **/
    _count?: true | GroupsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | GroupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: GroupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: GroupsMaxAggregateInputType
  }

  export type GetGroupsAggregateType<T extends GroupsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups[P]>
      : GetScalarType<T[P], AggregateGroups[P]>
  }


    
    
  export type GroupsGroupByArgs = {
    where?: groupsWhereInput
    orderBy?: Enumerable<groupsOrderByInput>
    by: Array<GroupsScalarFieldEnum>
    having?: groupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsCountAggregateInputType | true
    _min?: GroupsMinAggregateInputType
    _max?: GroupsMaxAggregateInputType
  }


  export type GroupsGroupByOutputType = {
    group_id: string
    group_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    integrator_id: string | null
    createdAt: Date
    updatedAt: Date
    _count: GroupsCountAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  type GetGroupsGroupByPayload<T extends GroupsGroupByArgs> = Promise<
    Array<
      PickArray<GroupsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof GroupsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], GroupsGroupByOutputType[P]> 
            : GetScalarType<T[P], GroupsGroupByOutputType[P]>
        }
      > 
    >


  export type groupsSelect = {
    group_id?: boolean
    group_name?: boolean
    change_name?: boolean
    is_disabled?: boolean
    integrator_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    integrators?: boolean | integratorsArgs
    cameras?: boolean | camerasFindManyArgs
    customers?: boolean | customersFindManyArgs
    sites?: boolean | sitesFindManyArgs
    users?: boolean | usersFindManyArgs
  }

  export type groupsInclude = {
    integrators?: boolean | integratorsArgs
    cameras?: boolean | camerasFindManyArgs
    customers?: boolean | customersFindManyArgs
    sites?: boolean | sitesFindManyArgs
    users?: boolean | usersFindManyArgs
  }

  export type groupsGetPayload<
    S extends boolean | null | undefined | groupsArgs,
    U = keyof S
      > = S extends true
        ? groups
    : S extends undefined
    ? never
    : S extends groupsArgs | groupsFindManyArgs
    ?'include' extends U
    ? groups  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'integrators'
        ? integratorsGetPayload<S['include'][P]> | null :
        P extends 'cameras'
        ? Array < camerasGetPayload<S['include'][P]>>  :
        P extends 'customers'
        ? Array < customersGetPayload<S['include'][P]>>  :
        P extends 'sites'
        ? Array < sitesGetPayload<S['include'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof groups ?groups [P]
  : 
          P extends 'integrators'
        ? integratorsGetPayload<S['select'][P]> | null :
        P extends 'cameras'
        ? Array < camerasGetPayload<S['select'][P]>>  :
        P extends 'customers'
        ? Array < customersGetPayload<S['select'][P]>>  :
        P extends 'sites'
        ? Array < sitesGetPayload<S['select'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  : never
  } 
    : groups
  : groups


  type groupsCountArgs = Merge<
    Omit<groupsFindManyArgs, 'select' | 'include'> & {
      select?: GroupsCountAggregateInputType | true
    }
  >

  export interface groupsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Groups that matches the filter.
     * @param {groupsFindUniqueArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends groupsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, groupsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'groups'> extends True ? CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>> : CheckSelect<T, Prisma__groupsClient<groups | null >, Prisma__groupsClient<groupsGetPayload<T> | null >>

    /**
     * Find the first Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupsFindFirstArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends groupsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, groupsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'groups'> extends True ? CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>> : CheckSelect<T, Prisma__groupsClient<groups | null >, Prisma__groupsClient<groupsGetPayload<T> | null >>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.groups.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.groups.findMany({ take: 10 })
     * 
     * // Only select the `group_id`
     * const groupsWithGroup_idOnly = await prisma.groups.findMany({ select: { group_id: true } })
     * 
    **/
    findMany<T extends groupsFindManyArgs>(
      args?: SelectSubset<T, groupsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<groups>>, PrismaPromise<Array<groupsGetPayload<T>>>>

    /**
     * Create a Groups.
     * @param {groupsCreateArgs} args - Arguments to create a Groups.
     * @example
     * // Create one Groups
     * const Groups = await prisma.groups.create({
     *   data: {
     *     // ... data to create a Groups
     *   }
     * })
     * 
    **/
    create<T extends groupsCreateArgs>(
      args: SelectSubset<T, groupsCreateArgs>
    ): CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>>

    /**
     * Create many Groups.
     *     @param {groupsCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const groups = await prisma.groups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends groupsCreateManyArgs>(
      args?: SelectSubset<T, groupsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups.
     * @param {groupsDeleteArgs} args - Arguments to delete one Groups.
     * @example
     * // Delete one Groups
     * const Groups = await prisma.groups.delete({
     *   where: {
     *     // ... filter to delete one Groups
     *   }
     * })
     * 
    **/
    delete<T extends groupsDeleteArgs>(
      args: SelectSubset<T, groupsDeleteArgs>
    ): CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>>

    /**
     * Update one Groups.
     * @param {groupsUpdateArgs} args - Arguments to update one Groups.
     * @example
     * // Update one Groups
     * const groups = await prisma.groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends groupsUpdateArgs>(
      args: SelectSubset<T, groupsUpdateArgs>
    ): CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>>

    /**
     * Delete zero or more Groups.
     * @param {groupsDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends groupsDeleteManyArgs>(
      args?: SelectSubset<T, groupsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const groups = await prisma.groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends groupsUpdateManyArgs>(
      args: SelectSubset<T, groupsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups.
     * @param {groupsUpsertArgs} args - Arguments to update or create a Groups.
     * @example
     * // Update or create a Groups
     * const groups = await prisma.groups.upsert({
     *   create: {
     *     // ... data to create a Groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups we want to update
     *   }
     * })
    **/
    upsert<T extends groupsUpsertArgs>(
      args: SelectSubset<T, groupsUpsertArgs>
    ): CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupsCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.groups.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends groupsCountArgs>(
      args?: Subset<T, groupsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsAggregateArgs>(args: Subset<T, GroupsAggregateArgs>): PrismaPromise<GetGroupsAggregateType<T>>

    /**
     * Group by Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__groupsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    integrators<T extends integratorsArgs = {}>(args?: Subset<T, integratorsArgs>): CheckSelect<T, Prisma__integratorsClient<integrators | null >, Prisma__integratorsClient<integratorsGetPayload<T> | null >>;

    cameras<T extends camerasFindManyArgs = {}>(args?: Subset<T, camerasFindManyArgs>): CheckSelect<T, PrismaPromise<Array<cameras>>, PrismaPromise<Array<camerasGetPayload<T>>>>;

    customers<T extends customersFindManyArgs = {}>(args?: Subset<T, customersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<customers>>, PrismaPromise<Array<customersGetPayload<T>>>>;

    sites<T extends sitesFindManyArgs = {}>(args?: Subset<T, sitesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sites>>, PrismaPromise<Array<sitesGetPayload<T>>>>;

    users<T extends usersFindManyArgs = {}>(args?: Subset<T, usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * groups findUnique
   */
  export type groupsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groupsInclude | null
    /**
     * Throw an Error if a groups can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which groups to fetch.
     * 
    **/
    where: groupsWhereUniqueInput
  }


  /**
   * groups findFirst
   */
  export type groupsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groupsInclude | null
    /**
     * Throw an Error if a groups can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which groups to fetch.
     * 
    **/
    where?: groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     * 
    **/
    orderBy?: Enumerable<groupsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups.
     * 
    **/
    cursor?: groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups.
     * 
    **/
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * groups findMany
   */
  export type groupsFindManyArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groupsInclude | null
    /**
     * Filter, which groups to fetch.
     * 
    **/
    where?: groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     * 
    **/
    orderBy?: Enumerable<groupsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groups.
     * 
    **/
    cursor?: groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * groups create
   */
  export type groupsCreateArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groupsInclude | null
    /**
     * The data needed to create a groups.
     * 
    **/
    data: XOR<groupsCreateInput, groupsUncheckedCreateInput>
  }


  /**
   * groups createMany
   */
  export type groupsCreateManyArgs = {
    data: Enumerable<groupsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * groups update
   */
  export type groupsUpdateArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groupsInclude | null
    /**
     * The data needed to update a groups.
     * 
    **/
    data: XOR<groupsUpdateInput, groupsUncheckedUpdateInput>
    /**
     * Choose, which groups to update.
     * 
    **/
    where: groupsWhereUniqueInput
  }


  /**
   * groups updateMany
   */
  export type groupsUpdateManyArgs = {
    data: XOR<groupsUpdateManyMutationInput, groupsUncheckedUpdateManyInput>
    where?: groupsWhereInput
  }


  /**
   * groups upsert
   */
  export type groupsUpsertArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groupsInclude | null
    /**
     * The filter to search for the groups to update in case it exists.
     * 
    **/
    where: groupsWhereUniqueInput
    /**
     * In case the groups found by the `where` argument doesn't exist, create a new groups with this data.
     * 
    **/
    create: XOR<groupsCreateInput, groupsUncheckedCreateInput>
    /**
     * In case the groups was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<groupsUpdateInput, groupsUncheckedUpdateInput>
  }


  /**
   * groups delete
   */
  export type groupsDeleteArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groupsInclude | null
    /**
     * Filter which groups to delete.
     * 
    **/
    where: groupsWhereUniqueInput
  }


  /**
   * groups deleteMany
   */
  export type groupsDeleteManyArgs = {
    where?: groupsWhereInput
  }


  /**
   * groups without action
   */
  export type groupsArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groupsInclude | null
  }



  /**
   * Model integrators
   */


  export type AggregateIntegrators = {
    _count: IntegratorsCountAggregateOutputType | null
    count: IntegratorsCountAggregateOutputType | null
    _min: IntegratorsMinAggregateOutputType | null
    min: IntegratorsMinAggregateOutputType | null
    _max: IntegratorsMaxAggregateOutputType | null
    max: IntegratorsMaxAggregateOutputType | null
  }

  export type IntegratorsMinAggregateOutputType = {
    integrator_id: string | null
    name: string | null
    email: string | null
    phone: string | null
    is_disabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IntegratorsMaxAggregateOutputType = {
    integrator_id: string | null
    name: string | null
    email: string | null
    phone: string | null
    is_disabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IntegratorsCountAggregateOutputType = {
    integrator_id: number
    name: number
    email: number
    phone: number
    is_disabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IntegratorsMinAggregateInputType = {
    integrator_id?: true
    name?: true
    email?: true
    phone?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IntegratorsMaxAggregateInputType = {
    integrator_id?: true
    name?: true
    email?: true
    phone?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IntegratorsCountAggregateInputType = {
    integrator_id?: true
    name?: true
    email?: true
    phone?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IntegratorsAggregateArgs = {
    /**
     * Filter which integrators to aggregate.
     * 
    **/
    where?: integratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integrators to fetch.
     * 
    **/
    orderBy?: Enumerable<integratorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: integratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integrators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integrators.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned integrators
    **/
    _count?: true | IntegratorsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | IntegratorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegratorsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: IntegratorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegratorsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: IntegratorsMaxAggregateInputType
  }

  export type GetIntegratorsAggregateType<T extends IntegratorsAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegrators]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegrators[P]>
      : GetScalarType<T[P], AggregateIntegrators[P]>
  }


    
    
  export type IntegratorsGroupByArgs = {
    where?: integratorsWhereInput
    orderBy?: Enumerable<integratorsOrderByInput>
    by: Array<IntegratorsScalarFieldEnum>
    having?: integratorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegratorsCountAggregateInputType | true
    _min?: IntegratorsMinAggregateInputType
    _max?: IntegratorsMaxAggregateInputType
  }


  export type IntegratorsGroupByOutputType = {
    integrator_id: string
    name: string | null
    email: string | null
    phone: string | null
    is_disabled: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: IntegratorsCountAggregateOutputType | null
    _min: IntegratorsMinAggregateOutputType | null
    _max: IntegratorsMaxAggregateOutputType | null
  }

  type GetIntegratorsGroupByPayload<T extends IntegratorsGroupByArgs> = Promise<
    Array<
      PickArray<IntegratorsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof IntegratorsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], IntegratorsGroupByOutputType[P]> 
            : GetScalarType<T[P], IntegratorsGroupByOutputType[P]>
        }
      > 
    >


  export type integratorsSelect = {
    integrator_id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    is_disabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cameras?: boolean | camerasFindManyArgs
    customers?: boolean | customersFindManyArgs
    groups?: boolean | groupsFindManyArgs
    sites?: boolean | sitesFindManyArgs
    users?: boolean | usersFindManyArgs
  }

  export type integratorsInclude = {
    cameras?: boolean | camerasFindManyArgs
    customers?: boolean | customersFindManyArgs
    groups?: boolean | groupsFindManyArgs
    sites?: boolean | sitesFindManyArgs
    users?: boolean | usersFindManyArgs
  }

  export type integratorsGetPayload<
    S extends boolean | null | undefined | integratorsArgs,
    U = keyof S
      > = S extends true
        ? integrators
    : S extends undefined
    ? never
    : S extends integratorsArgs | integratorsFindManyArgs
    ?'include' extends U
    ? integrators  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'cameras'
        ? Array < camerasGetPayload<S['include'][P]>>  :
        P extends 'customers'
        ? Array < customersGetPayload<S['include'][P]>>  :
        P extends 'groups'
        ? Array < groupsGetPayload<S['include'][P]>>  :
        P extends 'sites'
        ? Array < sitesGetPayload<S['include'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof integrators ?integrators [P]
  : 
          P extends 'cameras'
        ? Array < camerasGetPayload<S['select'][P]>>  :
        P extends 'customers'
        ? Array < customersGetPayload<S['select'][P]>>  :
        P extends 'groups'
        ? Array < groupsGetPayload<S['select'][P]>>  :
        P extends 'sites'
        ? Array < sitesGetPayload<S['select'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  : never
  } 
    : integrators
  : integrators


  type integratorsCountArgs = Merge<
    Omit<integratorsFindManyArgs, 'select' | 'include'> & {
      select?: IntegratorsCountAggregateInputType | true
    }
  >

  export interface integratorsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Integrators that matches the filter.
     * @param {integratorsFindUniqueArgs} args - Arguments to find a Integrators
     * @example
     * // Get one Integrators
     * const integrators = await prisma.integrators.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends integratorsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, integratorsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'integrators'> extends True ? CheckSelect<T, Prisma__integratorsClient<integrators>, Prisma__integratorsClient<integratorsGetPayload<T>>> : CheckSelect<T, Prisma__integratorsClient<integrators | null >, Prisma__integratorsClient<integratorsGetPayload<T> | null >>

    /**
     * Find the first Integrators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integratorsFindFirstArgs} args - Arguments to find a Integrators
     * @example
     * // Get one Integrators
     * const integrators = await prisma.integrators.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends integratorsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, integratorsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'integrators'> extends True ? CheckSelect<T, Prisma__integratorsClient<integrators>, Prisma__integratorsClient<integratorsGetPayload<T>>> : CheckSelect<T, Prisma__integratorsClient<integrators | null >, Prisma__integratorsClient<integratorsGetPayload<T> | null >>

    /**
     * Find zero or more Integrators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integratorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Integrators
     * const integrators = await prisma.integrators.findMany()
     * 
     * // Get first 10 Integrators
     * const integrators = await prisma.integrators.findMany({ take: 10 })
     * 
     * // Only select the `integrator_id`
     * const integratorsWithIntegrator_idOnly = await prisma.integrators.findMany({ select: { integrator_id: true } })
     * 
    **/
    findMany<T extends integratorsFindManyArgs>(
      args?: SelectSubset<T, integratorsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<integrators>>, PrismaPromise<Array<integratorsGetPayload<T>>>>

    /**
     * Create a Integrators.
     * @param {integratorsCreateArgs} args - Arguments to create a Integrators.
     * @example
     * // Create one Integrators
     * const Integrators = await prisma.integrators.create({
     *   data: {
     *     // ... data to create a Integrators
     *   }
     * })
     * 
    **/
    create<T extends integratorsCreateArgs>(
      args: SelectSubset<T, integratorsCreateArgs>
    ): CheckSelect<T, Prisma__integratorsClient<integrators>, Prisma__integratorsClient<integratorsGetPayload<T>>>

    /**
     * Create many Integrators.
     *     @param {integratorsCreateManyArgs} args - Arguments to create many Integrators.
     *     @example
     *     // Create many Integrators
     *     const integrators = await prisma.integrators.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends integratorsCreateManyArgs>(
      args?: SelectSubset<T, integratorsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Integrators.
     * @param {integratorsDeleteArgs} args - Arguments to delete one Integrators.
     * @example
     * // Delete one Integrators
     * const Integrators = await prisma.integrators.delete({
     *   where: {
     *     // ... filter to delete one Integrators
     *   }
     * })
     * 
    **/
    delete<T extends integratorsDeleteArgs>(
      args: SelectSubset<T, integratorsDeleteArgs>
    ): CheckSelect<T, Prisma__integratorsClient<integrators>, Prisma__integratorsClient<integratorsGetPayload<T>>>

    /**
     * Update one Integrators.
     * @param {integratorsUpdateArgs} args - Arguments to update one Integrators.
     * @example
     * // Update one Integrators
     * const integrators = await prisma.integrators.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends integratorsUpdateArgs>(
      args: SelectSubset<T, integratorsUpdateArgs>
    ): CheckSelect<T, Prisma__integratorsClient<integrators>, Prisma__integratorsClient<integratorsGetPayload<T>>>

    /**
     * Delete zero or more Integrators.
     * @param {integratorsDeleteManyArgs} args - Arguments to filter Integrators to delete.
     * @example
     * // Delete a few Integrators
     * const { count } = await prisma.integrators.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends integratorsDeleteManyArgs>(
      args?: SelectSubset<T, integratorsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integrators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integratorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Integrators
     * const integrators = await prisma.integrators.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends integratorsUpdateManyArgs>(
      args: SelectSubset<T, integratorsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Integrators.
     * @param {integratorsUpsertArgs} args - Arguments to update or create a Integrators.
     * @example
     * // Update or create a Integrators
     * const integrators = await prisma.integrators.upsert({
     *   create: {
     *     // ... data to create a Integrators
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Integrators we want to update
     *   }
     * })
    **/
    upsert<T extends integratorsUpsertArgs>(
      args: SelectSubset<T, integratorsUpsertArgs>
    ): CheckSelect<T, Prisma__integratorsClient<integrators>, Prisma__integratorsClient<integratorsGetPayload<T>>>

    /**
     * Count the number of Integrators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integratorsCountArgs} args - Arguments to filter Integrators to count.
     * @example
     * // Count the number of Integrators
     * const count = await prisma.integrators.count({
     *   where: {
     *     // ... the filter for the Integrators we want to count
     *   }
     * })
    **/
    count<T extends integratorsCountArgs>(
      args?: Subset<T, integratorsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegratorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Integrators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegratorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegratorsAggregateArgs>(args: Subset<T, IntegratorsAggregateArgs>): PrismaPromise<GetIntegratorsAggregateType<T>>

    /**
     * Group by Integrators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegratorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegratorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegratorsGroupByArgs['orderBy'] }
        : { orderBy?: IntegratorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegratorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegratorsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for integrators.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__integratorsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cameras<T extends camerasFindManyArgs = {}>(args?: Subset<T, camerasFindManyArgs>): CheckSelect<T, PrismaPromise<Array<cameras>>, PrismaPromise<Array<camerasGetPayload<T>>>>;

    customers<T extends customersFindManyArgs = {}>(args?: Subset<T, customersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<customers>>, PrismaPromise<Array<customersGetPayload<T>>>>;

    groups<T extends groupsFindManyArgs = {}>(args?: Subset<T, groupsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups>>, PrismaPromise<Array<groupsGetPayload<T>>>>;

    sites<T extends sitesFindManyArgs = {}>(args?: Subset<T, sitesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sites>>, PrismaPromise<Array<sitesGetPayload<T>>>>;

    users<T extends usersFindManyArgs = {}>(args?: Subset<T, usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * integrators findUnique
   */
  export type integratorsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the integrators
     * 
    **/
    select?: integratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: integratorsInclude | null
    /**
     * Throw an Error if a integrators can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which integrators to fetch.
     * 
    **/
    where: integratorsWhereUniqueInput
  }


  /**
   * integrators findFirst
   */
  export type integratorsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the integrators
     * 
    **/
    select?: integratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: integratorsInclude | null
    /**
     * Throw an Error if a integrators can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which integrators to fetch.
     * 
    **/
    where?: integratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integrators to fetch.
     * 
    **/
    orderBy?: Enumerable<integratorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for integrators.
     * 
    **/
    cursor?: integratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integrators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integrators.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of integrators.
     * 
    **/
    distinct?: Enumerable<IntegratorsScalarFieldEnum>
  }


  /**
   * integrators findMany
   */
  export type integratorsFindManyArgs = {
    /**
     * Select specific fields to fetch from the integrators
     * 
    **/
    select?: integratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: integratorsInclude | null
    /**
     * Filter, which integrators to fetch.
     * 
    **/
    where?: integratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integrators to fetch.
     * 
    **/
    orderBy?: Enumerable<integratorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing integrators.
     * 
    **/
    cursor?: integratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integrators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integrators.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IntegratorsScalarFieldEnum>
  }


  /**
   * integrators create
   */
  export type integratorsCreateArgs = {
    /**
     * Select specific fields to fetch from the integrators
     * 
    **/
    select?: integratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: integratorsInclude | null
    /**
     * The data needed to create a integrators.
     * 
    **/
    data: XOR<integratorsCreateInput, integratorsUncheckedCreateInput>
  }


  /**
   * integrators createMany
   */
  export type integratorsCreateManyArgs = {
    data: Enumerable<integratorsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * integrators update
   */
  export type integratorsUpdateArgs = {
    /**
     * Select specific fields to fetch from the integrators
     * 
    **/
    select?: integratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: integratorsInclude | null
    /**
     * The data needed to update a integrators.
     * 
    **/
    data: XOR<integratorsUpdateInput, integratorsUncheckedUpdateInput>
    /**
     * Choose, which integrators to update.
     * 
    **/
    where: integratorsWhereUniqueInput
  }


  /**
   * integrators updateMany
   */
  export type integratorsUpdateManyArgs = {
    data: XOR<integratorsUpdateManyMutationInput, integratorsUncheckedUpdateManyInput>
    where?: integratorsWhereInput
  }


  /**
   * integrators upsert
   */
  export type integratorsUpsertArgs = {
    /**
     * Select specific fields to fetch from the integrators
     * 
    **/
    select?: integratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: integratorsInclude | null
    /**
     * The filter to search for the integrators to update in case it exists.
     * 
    **/
    where: integratorsWhereUniqueInput
    /**
     * In case the integrators found by the `where` argument doesn't exist, create a new integrators with this data.
     * 
    **/
    create: XOR<integratorsCreateInput, integratorsUncheckedCreateInput>
    /**
     * In case the integrators was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<integratorsUpdateInput, integratorsUncheckedUpdateInput>
  }


  /**
   * integrators delete
   */
  export type integratorsDeleteArgs = {
    /**
     * Select specific fields to fetch from the integrators
     * 
    **/
    select?: integratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: integratorsInclude | null
    /**
     * Filter which integrators to delete.
     * 
    **/
    where: integratorsWhereUniqueInput
  }


  /**
   * integrators deleteMany
   */
  export type integratorsDeleteManyArgs = {
    where?: integratorsWhereInput
  }


  /**
   * integrators without action
   */
  export type integratorsArgs = {
    /**
     * Select specific fields to fetch from the integrators
     * 
    **/
    select?: integratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: integratorsInclude | null
  }



  /**
   * Model sites
   */


  export type AggregateSites = {
    _count: SitesCountAggregateOutputType | null
    count: SitesCountAggregateOutputType | null
    _min: SitesMinAggregateOutputType | null
    min: SitesMinAggregateOutputType | null
    _max: SitesMaxAggregateOutputType | null
    max: SitesMaxAggregateOutputType | null
  }

  export type SitesMinAggregateOutputType = {
    site_id: string | null
    site_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    group_id: string | null
    integrator_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SitesMaxAggregateOutputType = {
    site_id: string | null
    site_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    group_id: string | null
    integrator_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SitesCountAggregateOutputType = {
    site_id: number
    site_name: number
    change_name: number
    is_disabled: number
    group_id: number
    integrator_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SitesMinAggregateInputType = {
    site_id?: true
    site_name?: true
    change_name?: true
    is_disabled?: true
    group_id?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SitesMaxAggregateInputType = {
    site_id?: true
    site_name?: true
    change_name?: true
    is_disabled?: true
    group_id?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SitesCountAggregateInputType = {
    site_id?: true
    site_name?: true
    change_name?: true
    is_disabled?: true
    group_id?: true
    integrator_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SitesAggregateArgs = {
    /**
     * Filter which sites to aggregate.
     * 
    **/
    where?: sitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sites to fetch.
     * 
    **/
    orderBy?: Enumerable<sitesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: sitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sites
    **/
    _count?: true | SitesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | SitesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SitesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: SitesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SitesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: SitesMaxAggregateInputType
  }

  export type GetSitesAggregateType<T extends SitesAggregateArgs> = {
        [P in keyof T & keyof AggregateSites]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSites[P]>
      : GetScalarType<T[P], AggregateSites[P]>
  }


    
    
  export type SitesGroupByArgs = {
    where?: sitesWhereInput
    orderBy?: Enumerable<sitesOrderByInput>
    by: Array<SitesScalarFieldEnum>
    having?: sitesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SitesCountAggregateInputType | true
    _min?: SitesMinAggregateInputType
    _max?: SitesMaxAggregateInputType
  }


  export type SitesGroupByOutputType = {
    site_id: string
    site_name: string | null
    change_name: string | null
    is_disabled: boolean | null
    group_id: string | null
    integrator_id: string | null
    createdAt: Date
    updatedAt: Date
    _count: SitesCountAggregateOutputType | null
    _min: SitesMinAggregateOutputType | null
    _max: SitesMaxAggregateOutputType | null
  }

  type GetSitesGroupByPayload<T extends SitesGroupByArgs> = Promise<
    Array<
      PickArray<SitesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof SitesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], SitesGroupByOutputType[P]> 
            : GetScalarType<T[P], SitesGroupByOutputType[P]>
        }
      > 
    >


  export type sitesSelect = {
    site_id?: boolean
    site_name?: boolean
    change_name?: boolean
    is_disabled?: boolean
    group_id?: boolean
    integrator_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    groups?: boolean | groupsArgs
    integrators?: boolean | integratorsArgs
    cameras?: boolean | camerasFindManyArgs
    customers?: boolean | customersFindManyArgs
    users?: boolean | usersFindManyArgs
  }

  export type sitesInclude = {
    groups?: boolean | groupsArgs
    integrators?: boolean | integratorsArgs
    cameras?: boolean | camerasFindManyArgs
    customers?: boolean | customersFindManyArgs
    users?: boolean | usersFindManyArgs
  }

  export type sitesGetPayload<
    S extends boolean | null | undefined | sitesArgs,
    U = keyof S
      > = S extends true
        ? sites
    : S extends undefined
    ? never
    : S extends sitesArgs | sitesFindManyArgs
    ?'include' extends U
    ? sites  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'groups'
        ? groupsGetPayload<S['include'][P]> | null :
        P extends 'integrators'
        ? integratorsGetPayload<S['include'][P]> | null :
        P extends 'cameras'
        ? Array < camerasGetPayload<S['include'][P]>>  :
        P extends 'customers'
        ? Array < customersGetPayload<S['include'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof sites ?sites [P]
  : 
          P extends 'groups'
        ? groupsGetPayload<S['select'][P]> | null :
        P extends 'integrators'
        ? integratorsGetPayload<S['select'][P]> | null :
        P extends 'cameras'
        ? Array < camerasGetPayload<S['select'][P]>>  :
        P extends 'customers'
        ? Array < customersGetPayload<S['select'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  : never
  } 
    : sites
  : sites


  type sitesCountArgs = Merge<
    Omit<sitesFindManyArgs, 'select' | 'include'> & {
      select?: SitesCountAggregateInputType | true
    }
  >

  export interface sitesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sites that matches the filter.
     * @param {sitesFindUniqueArgs} args - Arguments to find a Sites
     * @example
     * // Get one Sites
     * const sites = await prisma.sites.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sitesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sitesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sites'> extends True ? CheckSelect<T, Prisma__sitesClient<sites>, Prisma__sitesClient<sitesGetPayload<T>>> : CheckSelect<T, Prisma__sitesClient<sites | null >, Prisma__sitesClient<sitesGetPayload<T> | null >>

    /**
     * Find the first Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sitesFindFirstArgs} args - Arguments to find a Sites
     * @example
     * // Get one Sites
     * const sites = await prisma.sites.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sitesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sitesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sites'> extends True ? CheckSelect<T, Prisma__sitesClient<sites>, Prisma__sitesClient<sitesGetPayload<T>>> : CheckSelect<T, Prisma__sitesClient<sites | null >, Prisma__sitesClient<sitesGetPayload<T> | null >>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sitesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.sites.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.sites.findMany({ take: 10 })
     * 
     * // Only select the `site_id`
     * const sitesWithSite_idOnly = await prisma.sites.findMany({ select: { site_id: true } })
     * 
    **/
    findMany<T extends sitesFindManyArgs>(
      args?: SelectSubset<T, sitesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<sites>>, PrismaPromise<Array<sitesGetPayload<T>>>>

    /**
     * Create a Sites.
     * @param {sitesCreateArgs} args - Arguments to create a Sites.
     * @example
     * // Create one Sites
     * const Sites = await prisma.sites.create({
     *   data: {
     *     // ... data to create a Sites
     *   }
     * })
     * 
    **/
    create<T extends sitesCreateArgs>(
      args: SelectSubset<T, sitesCreateArgs>
    ): CheckSelect<T, Prisma__sitesClient<sites>, Prisma__sitesClient<sitesGetPayload<T>>>

    /**
     * Create many Sites.
     *     @param {sitesCreateManyArgs} args - Arguments to create many Sites.
     *     @example
     *     // Create many Sites
     *     const sites = await prisma.sites.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sitesCreateManyArgs>(
      args?: SelectSubset<T, sitesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sites.
     * @param {sitesDeleteArgs} args - Arguments to delete one Sites.
     * @example
     * // Delete one Sites
     * const Sites = await prisma.sites.delete({
     *   where: {
     *     // ... filter to delete one Sites
     *   }
     * })
     * 
    **/
    delete<T extends sitesDeleteArgs>(
      args: SelectSubset<T, sitesDeleteArgs>
    ): CheckSelect<T, Prisma__sitesClient<sites>, Prisma__sitesClient<sitesGetPayload<T>>>

    /**
     * Update one Sites.
     * @param {sitesUpdateArgs} args - Arguments to update one Sites.
     * @example
     * // Update one Sites
     * const sites = await prisma.sites.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sitesUpdateArgs>(
      args: SelectSubset<T, sitesUpdateArgs>
    ): CheckSelect<T, Prisma__sitesClient<sites>, Prisma__sitesClient<sitesGetPayload<T>>>

    /**
     * Delete zero or more Sites.
     * @param {sitesDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.sites.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sitesDeleteManyArgs>(
      args?: SelectSubset<T, sitesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sitesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const sites = await prisma.sites.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sitesUpdateManyArgs>(
      args: SelectSubset<T, sitesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sites.
     * @param {sitesUpsertArgs} args - Arguments to update or create a Sites.
     * @example
     * // Update or create a Sites
     * const sites = await prisma.sites.upsert({
     *   create: {
     *     // ... data to create a Sites
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sites we want to update
     *   }
     * })
    **/
    upsert<T extends sitesUpsertArgs>(
      args: SelectSubset<T, sitesUpsertArgs>
    ): CheckSelect<T, Prisma__sitesClient<sites>, Prisma__sitesClient<sitesGetPayload<T>>>

    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sitesCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.sites.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends sitesCountArgs>(
      args?: Subset<T, sitesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SitesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SitesAggregateArgs>(args: Subset<T, SitesAggregateArgs>): PrismaPromise<GetSitesAggregateType<T>>

    /**
     * Group by Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SitesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SitesGroupByArgs['orderBy'] }
        : { orderBy?: SitesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SitesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSitesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for sites.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sitesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends groupsArgs = {}>(args?: Subset<T, groupsArgs>): CheckSelect<T, Prisma__groupsClient<groups | null >, Prisma__groupsClient<groupsGetPayload<T> | null >>;

    integrators<T extends integratorsArgs = {}>(args?: Subset<T, integratorsArgs>): CheckSelect<T, Prisma__integratorsClient<integrators | null >, Prisma__integratorsClient<integratorsGetPayload<T> | null >>;

    cameras<T extends camerasFindManyArgs = {}>(args?: Subset<T, camerasFindManyArgs>): CheckSelect<T, PrismaPromise<Array<cameras>>, PrismaPromise<Array<camerasGetPayload<T>>>>;

    customers<T extends customersFindManyArgs = {}>(args?: Subset<T, customersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<customers>>, PrismaPromise<Array<customersGetPayload<T>>>>;

    users<T extends usersFindManyArgs = {}>(args?: Subset<T, usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * sites findUnique
   */
  export type sitesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the sites
     * 
    **/
    select?: sitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sitesInclude | null
    /**
     * Throw an Error if a sites can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sites to fetch.
     * 
    **/
    where: sitesWhereUniqueInput
  }


  /**
   * sites findFirst
   */
  export type sitesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the sites
     * 
    **/
    select?: sitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sitesInclude | null
    /**
     * Throw an Error if a sites can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sites to fetch.
     * 
    **/
    where?: sitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sites to fetch.
     * 
    **/
    orderBy?: Enumerable<sitesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sites.
     * 
    **/
    cursor?: sitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sites.
     * 
    **/
    distinct?: Enumerable<SitesScalarFieldEnum>
  }


  /**
   * sites findMany
   */
  export type sitesFindManyArgs = {
    /**
     * Select specific fields to fetch from the sites
     * 
    **/
    select?: sitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sitesInclude | null
    /**
     * Filter, which sites to fetch.
     * 
    **/
    where?: sitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sites to fetch.
     * 
    **/
    orderBy?: Enumerable<sitesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sites.
     * 
    **/
    cursor?: sitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sites.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SitesScalarFieldEnum>
  }


  /**
   * sites create
   */
  export type sitesCreateArgs = {
    /**
     * Select specific fields to fetch from the sites
     * 
    **/
    select?: sitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sitesInclude | null
    /**
     * The data needed to create a sites.
     * 
    **/
    data: XOR<sitesCreateInput, sitesUncheckedCreateInput>
  }


  /**
   * sites createMany
   */
  export type sitesCreateManyArgs = {
    data: Enumerable<sitesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sites update
   */
  export type sitesUpdateArgs = {
    /**
     * Select specific fields to fetch from the sites
     * 
    **/
    select?: sitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sitesInclude | null
    /**
     * The data needed to update a sites.
     * 
    **/
    data: XOR<sitesUpdateInput, sitesUncheckedUpdateInput>
    /**
     * Choose, which sites to update.
     * 
    **/
    where: sitesWhereUniqueInput
  }


  /**
   * sites updateMany
   */
  export type sitesUpdateManyArgs = {
    data: XOR<sitesUpdateManyMutationInput, sitesUncheckedUpdateManyInput>
    where?: sitesWhereInput
  }


  /**
   * sites upsert
   */
  export type sitesUpsertArgs = {
    /**
     * Select specific fields to fetch from the sites
     * 
    **/
    select?: sitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sitesInclude | null
    /**
     * The filter to search for the sites to update in case it exists.
     * 
    **/
    where: sitesWhereUniqueInput
    /**
     * In case the sites found by the `where` argument doesn't exist, create a new sites with this data.
     * 
    **/
    create: XOR<sitesCreateInput, sitesUncheckedCreateInput>
    /**
     * In case the sites was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<sitesUpdateInput, sitesUncheckedUpdateInput>
  }


  /**
   * sites delete
   */
  export type sitesDeleteArgs = {
    /**
     * Select specific fields to fetch from the sites
     * 
    **/
    select?: sitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sitesInclude | null
    /**
     * Filter which sites to delete.
     * 
    **/
    where: sitesWhereUniqueInput
  }


  /**
   * sites deleteMany
   */
  export type sitesDeleteManyArgs = {
    where?: sitesWhereInput
  }


  /**
   * sites without action
   */
  export type sitesArgs = {
    /**
     * Select specific fields to fetch from the sites
     * 
    **/
    select?: sitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sitesInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: string | null
    group_id: string | null
    integrator_id: string | null
    user_name: string | null
    change_name: string | null
    user_email: string | null
    is_disabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: string | null
    group_id: string | null
    integrator_id: string | null
    user_name: string | null
    change_name: string | null
    user_email: string | null
    is_disabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    group_id: number
    integrator_id: number
    user_name: number
    change_name: number
    user_email: number
    is_disabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    user_id?: true
    group_id?: true
    integrator_id?: true
    user_name?: true
    change_name?: true
    user_email?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    group_id?: true
    integrator_id?: true
    user_name?: true
    change_name?: true
    user_email?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    group_id?: true
    integrator_id?: true
    user_name?: true
    change_name?: true
    user_email?: true
    is_disabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }


    
    
  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    user_id: string
    group_id: string | null
    integrator_id: string | null
    user_name: string | null
    change_name: string | null
    user_email: string | null
    is_disabled: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Promise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UsersGroupByOutputType[P]> 
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      > 
    >


  export type usersSelect = {
    user_id?: boolean
    group_id?: boolean
    integrator_id?: boolean
    user_name?: boolean
    change_name?: boolean
    user_email?: boolean
    is_disabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    groups?: boolean | groupsArgs
    integrators?: boolean | integratorsArgs
    cameras?: boolean | camerasFindManyArgs
    customers?: boolean | customersFindManyArgs
    sites?: boolean | sitesFindManyArgs
  }

  export type usersInclude = {
    groups?: boolean | groupsArgs
    integrators?: boolean | integratorsArgs
    cameras?: boolean | camerasFindManyArgs
    customers?: boolean | customersFindManyArgs
    sites?: boolean | sitesFindManyArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'groups'
        ? groupsGetPayload<S['include'][P]> | null :
        P extends 'integrators'
        ? integratorsGetPayload<S['include'][P]> | null :
        P extends 'cameras'
        ? Array < camerasGetPayload<S['include'][P]>>  :
        P extends 'customers'
        ? Array < customersGetPayload<S['include'][P]>>  :
        P extends 'sites'
        ? Array < sitesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'groups'
        ? groupsGetPayload<S['select'][P]> | null :
        P extends 'integrators'
        ? integratorsGetPayload<S['select'][P]> | null :
        P extends 'cameras'
        ? Array < camerasGetPayload<S['select'][P]>>  :
        P extends 'customers'
        ? Array < customersGetPayload<S['select'][P]>>  :
        P extends 'sites'
        ? Array < sitesGetPayload<S['select'][P]>>  : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends groupsArgs = {}>(args?: Subset<T, groupsArgs>): CheckSelect<T, Prisma__groupsClient<groups | null >, Prisma__groupsClient<groupsGetPayload<T> | null >>;

    integrators<T extends integratorsArgs = {}>(args?: Subset<T, integratorsArgs>): CheckSelect<T, Prisma__integratorsClient<integrators | null >, Prisma__integratorsClient<integratorsGetPayload<T> | null >>;

    cameras<T extends camerasFindManyArgs = {}>(args?: Subset<T, camerasFindManyArgs>): CheckSelect<T, PrismaPromise<Array<cameras>>, PrismaPromise<Array<camerasGetPayload<T>>>>;

    customers<T extends customersFindManyArgs = {}>(args?: Subset<T, customersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<customers>>, PrismaPromise<Array<customersGetPayload<T>>>>;

    sites<T extends sitesFindManyArgs = {}>(args?: Subset<T, sitesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sites>>, PrismaPromise<Array<sitesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CamerasScalarFieldEnum: {
    camera_id: 'camera_id',
    camera_name: 'camera_name',
    change_name: 'change_name',
    camera_ip: 'camera_ip',
    total_request: 'total_request',
    smtp_user_name: 'smtp_user_name',
    smtp_password: 'smtp_password',
    group_id: 'group_id',
    site_id: 'site_id',
    integrator_id: 'integrator_id',
    email: 'email',
    is_disabled: 'is_disabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CamerasScalarFieldEnum = (typeof CamerasScalarFieldEnum)[keyof typeof CamerasScalarFieldEnum]


  export const CustomersScalarFieldEnum: {
    customer_id: 'customer_id',
    customer_name: 'customer_name',
    change_name: 'change_name',
    is_disabled: 'is_disabled',
    group_id: 'group_id',
    integrator_id: 'integrator_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomersScalarFieldEnum = (typeof CustomersScalarFieldEnum)[keyof typeof CustomersScalarFieldEnum]


  export const GroupsScalarFieldEnum: {
    group_id: 'group_id',
    group_name: 'group_name',
    change_name: 'change_name',
    is_disabled: 'is_disabled',
    integrator_id: 'integrator_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupsScalarFieldEnum = (typeof GroupsScalarFieldEnum)[keyof typeof GroupsScalarFieldEnum]


  export const IntegratorsScalarFieldEnum: {
    integrator_id: 'integrator_id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    is_disabled: 'is_disabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IntegratorsScalarFieldEnum = (typeof IntegratorsScalarFieldEnum)[keyof typeof IntegratorsScalarFieldEnum]


  export const SitesScalarFieldEnum: {
    site_id: 'site_id',
    site_name: 'site_name',
    change_name: 'change_name',
    is_disabled: 'is_disabled',
    group_id: 'group_id',
    integrator_id: 'integrator_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SitesScalarFieldEnum = (typeof SitesScalarFieldEnum)[keyof typeof SitesScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    group_id: 'group_id',
    integrator_id: 'integrator_id',
    user_name: 'user_name',
    change_name: 'change_name',
    user_email: 'user_email',
    is_disabled: 'is_disabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type camerasWhereInput = {
    AND?: Enumerable<camerasWhereInput>
    OR?: Enumerable<camerasWhereInput>
    NOT?: Enumerable<camerasWhereInput>
    camera_id?: StringFilter | string
    camera_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    camera_ip?: StringNullableFilter | string | null
    total_request?: IntNullableFilter | number | null
    smtp_user_name?: StringNullableFilter | string | null
    smtp_password?: StringNullableFilter | string | null
    group_id?: StringNullableFilter | string | null
    site_id?: StringNullableFilter | string | null
    integrator_id?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    groups?: XOR<GroupsRelationFilter, groupsWhereInput> | null
    integrators?: XOR<IntegratorsRelationFilter, integratorsWhereInput> | null
    sites?: XOR<SitesRelationFilter, sitesWhereInput> | null
    users?: UsersListRelationFilter
  }

  export type camerasOrderByInput = {
    camera_id?: SortOrder
    camera_name?: SortOrder
    change_name?: SortOrder
    camera_ip?: SortOrder
    total_request?: SortOrder
    smtp_user_name?: SortOrder
    smtp_password?: SortOrder
    group_id?: SortOrder
    site_id?: SortOrder
    integrator_id?: SortOrder
    email?: SortOrder
    is_disabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type camerasWhereUniqueInput = {
    camera_id?: string
  }

  export type camerasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<camerasScalarWhereWithAggregatesInput>
    OR?: Enumerable<camerasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<camerasScalarWhereWithAggregatesInput>
    camera_id?: StringWithAggregatesFilter | string
    camera_name?: StringNullableWithAggregatesFilter | string | null
    change_name?: StringNullableWithAggregatesFilter | string | null
    camera_ip?: StringNullableWithAggregatesFilter | string | null
    total_request?: IntNullableWithAggregatesFilter | number | null
    smtp_user_name?: StringNullableWithAggregatesFilter | string | null
    smtp_password?: StringNullableWithAggregatesFilter | string | null
    group_id?: StringNullableWithAggregatesFilter | string | null
    site_id?: StringNullableWithAggregatesFilter | string | null
    integrator_id?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    is_disabled?: BoolNullableWithAggregatesFilter | boolean | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type customersWhereInput = {
    AND?: Enumerable<customersWhereInput>
    OR?: Enumerable<customersWhereInput>
    NOT?: Enumerable<customersWhereInput>
    customer_id?: StringFilter | string
    customer_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    group_id?: StringNullableFilter | string | null
    integrator_id?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    groups?: XOR<GroupsRelationFilter, groupsWhereInput> | null
    integrators?: XOR<IntegratorsRelationFilter, integratorsWhereInput> | null
    sites?: SitesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type customersOrderByInput = {
    customer_id?: SortOrder
    customer_name?: SortOrder
    change_name?: SortOrder
    is_disabled?: SortOrder
    group_id?: SortOrder
    integrator_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type customersWhereUniqueInput = {
    customer_id?: string
  }

  export type customersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customersScalarWhereWithAggregatesInput>
    OR?: Enumerable<customersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customersScalarWhereWithAggregatesInput>
    customer_id?: StringWithAggregatesFilter | string
    customer_name?: StringNullableWithAggregatesFilter | string | null
    change_name?: StringNullableWithAggregatesFilter | string | null
    is_disabled?: BoolNullableWithAggregatesFilter | boolean | null
    group_id?: StringNullableWithAggregatesFilter | string | null
    integrator_id?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type groupsWhereInput = {
    AND?: Enumerable<groupsWhereInput>
    OR?: Enumerable<groupsWhereInput>
    NOT?: Enumerable<groupsWhereInput>
    group_id?: StringFilter | string
    group_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    integrator_id?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    integrators?: XOR<IntegratorsRelationFilter, integratorsWhereInput> | null
    cameras?: CamerasListRelationFilter
    customers?: CustomersListRelationFilter
    sites?: SitesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type groupsOrderByInput = {
    group_id?: SortOrder
    group_name?: SortOrder
    change_name?: SortOrder
    is_disabled?: SortOrder
    integrator_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type groupsWhereUniqueInput = {
    group_id?: string
  }

  export type groupsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<groupsScalarWhereWithAggregatesInput>
    OR?: Enumerable<groupsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<groupsScalarWhereWithAggregatesInput>
    group_id?: StringWithAggregatesFilter | string
    group_name?: StringNullableWithAggregatesFilter | string | null
    change_name?: StringNullableWithAggregatesFilter | string | null
    is_disabled?: BoolNullableWithAggregatesFilter | boolean | null
    integrator_id?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type integratorsWhereInput = {
    AND?: Enumerable<integratorsWhereInput>
    OR?: Enumerable<integratorsWhereInput>
    NOT?: Enumerable<integratorsWhereInput>
    integrator_id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    cameras?: CamerasListRelationFilter
    customers?: CustomersListRelationFilter
    groups?: GroupsListRelationFilter
    sites?: SitesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type integratorsOrderByInput = {
    integrator_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    is_disabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type integratorsWhereUniqueInput = {
    integrator_id?: string
  }

  export type integratorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<integratorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<integratorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<integratorsScalarWhereWithAggregatesInput>
    integrator_id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    is_disabled?: BoolNullableWithAggregatesFilter | boolean | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type sitesWhereInput = {
    AND?: Enumerable<sitesWhereInput>
    OR?: Enumerable<sitesWhereInput>
    NOT?: Enumerable<sitesWhereInput>
    site_id?: StringFilter | string
    site_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    group_id?: StringNullableFilter | string | null
    integrator_id?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    groups?: XOR<GroupsRelationFilter, groupsWhereInput> | null
    integrators?: XOR<IntegratorsRelationFilter, integratorsWhereInput> | null
    cameras?: CamerasListRelationFilter
    customers?: CustomersListRelationFilter
    users?: UsersListRelationFilter
  }

  export type sitesOrderByInput = {
    site_id?: SortOrder
    site_name?: SortOrder
    change_name?: SortOrder
    is_disabled?: SortOrder
    group_id?: SortOrder
    integrator_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type sitesWhereUniqueInput = {
    site_id?: string
  }

  export type sitesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sitesScalarWhereWithAggregatesInput>
    OR?: Enumerable<sitesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sitesScalarWhereWithAggregatesInput>
    site_id?: StringWithAggregatesFilter | string
    site_name?: StringNullableWithAggregatesFilter | string | null
    change_name?: StringNullableWithAggregatesFilter | string | null
    is_disabled?: BoolNullableWithAggregatesFilter | boolean | null
    group_id?: StringNullableWithAggregatesFilter | string | null
    integrator_id?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    user_id?: StringFilter | string
    group_id?: StringNullableFilter | string | null
    integrator_id?: StringNullableFilter | string | null
    user_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    user_email?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    groups?: XOR<GroupsRelationFilter, groupsWhereInput> | null
    integrators?: XOR<IntegratorsRelationFilter, integratorsWhereInput> | null
    cameras?: CamerasListRelationFilter
    customers?: CustomersListRelationFilter
    sites?: SitesListRelationFilter
  }

  export type usersOrderByInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    integrator_id?: SortOrder
    user_name?: SortOrder
    change_name?: SortOrder
    user_email?: SortOrder
    is_disabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersWhereUniqueInput = {
    user_id?: string
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    user_id?: StringWithAggregatesFilter | string
    group_id?: StringNullableWithAggregatesFilter | string | null
    integrator_id?: StringNullableWithAggregatesFilter | string | null
    user_name?: StringNullableWithAggregatesFilter | string | null
    change_name?: StringNullableWithAggregatesFilter | string | null
    user_email?: StringNullableWithAggregatesFilter | string | null
    is_disabled?: BoolNullableWithAggregatesFilter | boolean | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type camerasCreateInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutCamerasInput
    integrators?: integratorsCreateNestedOneWithoutCamerasInput
    sites?: sitesCreateNestedOneWithoutCamerasInput
    users?: usersCreateNestedManyWithoutCamerasInput
  }

  export type camerasUncheckedCreateInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    group_id?: string | null
    site_id?: string | null
    integrator_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasUpdateInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutCamerasInput
    integrators?: integratorsUpdateOneWithoutCamerasInput
    sites?: sitesUpdateOneWithoutCamerasInput
    users?: usersUpdateManyWithoutCamerasInput
  }

  export type camerasUncheckedUpdateInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    site_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type camerasCreateManyInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    group_id?: string | null
    site_id?: string | null
    integrator_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasUpdateManyMutationInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type camerasUncheckedUpdateManyInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    site_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customersCreateInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutCustomersInput
    integrators?: integratorsCreateNestedOneWithoutCustomersInput
    sites?: sitesCreateNestedManyWithoutCustomersInput
    users?: usersCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type customersUpdateInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutCustomersInput
    integrators?: integratorsUpdateOneWithoutCustomersInput
    sites?: sitesUpdateManyWithoutCustomersInput
    users?: usersUpdateManyWithoutCustomersInput
  }

  export type customersUncheckedUpdateInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customersCreateManyInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type customersUpdateManyMutationInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customersUncheckedUpdateManyInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type groupsCreateInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutGroupsInput
    cameras?: camerasCreateNestedManyWithoutGroupsInput
    customers?: customersCreateNestedManyWithoutGroupsInput
    sites?: sitesCreateNestedManyWithoutGroupsInput
    users?: usersCreateNestedManyWithoutGroupsInput
  }

  export type groupsUncheckedCreateInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutGroupsInput
    customers?: customersUncheckedCreateNestedManyWithoutGroupsInput
    sites?: sitesUncheckedCreateNestedManyWithoutGroupsInput
    users?: usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type groupsUpdateInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutGroupsInput
    cameras?: camerasUpdateManyWithoutGroupsInput
    customers?: customersUpdateManyWithoutGroupsInput
    sites?: sitesUpdateManyWithoutGroupsInput
    users?: usersUpdateManyWithoutGroupsInput
  }

  export type groupsUncheckedUpdateInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutGroupsInput
    customers?: customersUncheckedUpdateManyWithoutGroupsInput
    sites?: sitesUncheckedUpdateManyWithoutGroupsInput
    users?: usersUncheckedUpdateManyWithoutGroupsInput
  }

  export type groupsCreateManyInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type groupsUpdateManyMutationInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type groupsUncheckedUpdateManyInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type integratorsCreateInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasCreateNestedManyWithoutIntegratorsInput
    customers?: customersCreateNestedManyWithoutIntegratorsInput
    groups?: groupsCreateNestedManyWithoutIntegratorsInput
    sites?: sitesCreateNestedManyWithoutIntegratorsInput
    users?: usersCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedCreateInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutIntegratorsInput
    customers?: customersUncheckedCreateNestedManyWithoutIntegratorsInput
    groups?: groupsUncheckedCreateNestedManyWithoutIntegratorsInput
    sites?: sitesUncheckedCreateNestedManyWithoutIntegratorsInput
    users?: usersUncheckedCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsUpdateInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUpdateManyWithoutIntegratorsInput
    customers?: customersUpdateManyWithoutIntegratorsInput
    groups?: groupsUpdateManyWithoutIntegratorsInput
    sites?: sitesUpdateManyWithoutIntegratorsInput
    users?: usersUpdateManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedUpdateInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutIntegratorsInput
    customers?: customersUncheckedUpdateManyWithoutIntegratorsInput
    groups?: groupsUncheckedUpdateManyWithoutIntegratorsInput
    sites?: sitesUncheckedUpdateManyWithoutIntegratorsInput
    users?: usersUncheckedUpdateManyWithoutIntegratorsInput
  }

  export type integratorsCreateManyInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type integratorsUpdateManyMutationInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type integratorsUncheckedUpdateManyInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sitesCreateInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutSitesInput
    integrators?: integratorsCreateNestedOneWithoutSitesInput
    cameras?: camerasCreateNestedManyWithoutSitesInput
    customers?: customersCreateNestedManyWithoutSitesInput
    users?: usersCreateNestedManyWithoutSitesInput
  }

  export type sitesUncheckedCreateInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutSitesInput
  }

  export type sitesUpdateInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutSitesInput
    integrators?: integratorsUpdateOneWithoutSitesInput
    cameras?: camerasUpdateManyWithoutSitesInput
    customers?: customersUpdateManyWithoutSitesInput
    users?: usersUpdateManyWithoutSitesInput
  }

  export type sitesUncheckedUpdateInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutSitesInput
  }

  export type sitesCreateManyInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sitesUpdateManyMutationInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sitesUncheckedUpdateManyInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    user_id?: string
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutUsersInput
    integrators?: integratorsCreateNestedOneWithoutUsersInput
    cameras?: camerasCreateNestedManyWithoutUsersInput
    customers?: customersCreateNestedManyWithoutUsersInput
    sites?: sitesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: string
    group_id?: string | null
    integrator_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutUsersInput
    integrators?: integratorsUpdateOneWithoutUsersInput
    cameras?: camerasUpdateManyWithoutUsersInput
    customers?: customersUpdateManyWithoutUsersInput
    sites?: sitesUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateManyInput = {
    user_id?: string
    group_id?: string | null
    integrator_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type GroupsRelationFilter = {
    is?: groupsWhereInput | null
    isNot?: groupsWhereInput | null
  }

  export type IntegratorsRelationFilter = {
    is?: integratorsWhereInput | null
    isNot?: integratorsWhereInput | null
  }

  export type SitesRelationFilter = {
    is?: sitesWhereInput | null
    isNot?: sitesWhereInput | null
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type SitesListRelationFilter = {
    every?: sitesWhereInput
    some?: sitesWhereInput
    none?: sitesWhereInput
  }

  export type CamerasListRelationFilter = {
    every?: camerasWhereInput
    some?: camerasWhereInput
    none?: camerasWhereInput
  }

  export type CustomersListRelationFilter = {
    every?: customersWhereInput
    some?: customersWhereInput
    none?: customersWhereInput
  }

  export type GroupsListRelationFilter = {
    every?: groupsWhereInput
    some?: groupsWhereInput
    none?: groupsWhereInput
  }

  export type groupsCreateNestedOneWithoutCamerasInput = {
    create?: XOR<groupsCreateWithoutCamerasInput, groupsUncheckedCreateWithoutCamerasInput>
    connectOrCreate?: groupsCreateOrConnectWithoutCamerasInput
    connect?: groupsWhereUniqueInput
  }

  export type integratorsCreateNestedOneWithoutCamerasInput = {
    create?: XOR<integratorsCreateWithoutCamerasInput, integratorsUncheckedCreateWithoutCamerasInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutCamerasInput
    connect?: integratorsWhereUniqueInput
  }

  export type sitesCreateNestedOneWithoutCamerasInput = {
    create?: XOR<sitesCreateWithoutCamerasInput, sitesUncheckedCreateWithoutCamerasInput>
    connectOrCreate?: sitesCreateOrConnectWithoutCamerasInput
    connect?: sitesWhereUniqueInput
  }

  export type usersCreateNestedManyWithoutCamerasInput = {
    create?: XOR<Enumerable<usersCreateWithoutCamerasInput>, Enumerable<usersUncheckedCreateWithoutCamerasInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutCamerasInput>
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type groupsUpdateOneWithoutCamerasInput = {
    create?: XOR<groupsCreateWithoutCamerasInput, groupsUncheckedCreateWithoutCamerasInput>
    connectOrCreate?: groupsCreateOrConnectWithoutCamerasInput
    upsert?: groupsUpsertWithoutCamerasInput
    connect?: groupsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<groupsUpdateWithoutCamerasInput, groupsUncheckedUpdateWithoutCamerasInput>
  }

  export type integratorsUpdateOneWithoutCamerasInput = {
    create?: XOR<integratorsCreateWithoutCamerasInput, integratorsUncheckedCreateWithoutCamerasInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutCamerasInput
    upsert?: integratorsUpsertWithoutCamerasInput
    connect?: integratorsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<integratorsUpdateWithoutCamerasInput, integratorsUncheckedUpdateWithoutCamerasInput>
  }

  export type sitesUpdateOneWithoutCamerasInput = {
    create?: XOR<sitesCreateWithoutCamerasInput, sitesUncheckedCreateWithoutCamerasInput>
    connectOrCreate?: sitesCreateOrConnectWithoutCamerasInput
    upsert?: sitesUpsertWithoutCamerasInput
    connect?: sitesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<sitesUpdateWithoutCamerasInput, sitesUncheckedUpdateWithoutCamerasInput>
  }

  export type usersUpdateManyWithoutCamerasInput = {
    create?: XOR<Enumerable<usersCreateWithoutCamerasInput>, Enumerable<usersUncheckedCreateWithoutCamerasInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutCamerasInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutCamerasInput>
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutCamerasInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutCamerasInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type groupsCreateNestedOneWithoutCustomersInput = {
    create?: XOR<groupsCreateWithoutCustomersInput, groupsUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: groupsCreateOrConnectWithoutCustomersInput
    connect?: groupsWhereUniqueInput
  }

  export type integratorsCreateNestedOneWithoutCustomersInput = {
    create?: XOR<integratorsCreateWithoutCustomersInput, integratorsUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutCustomersInput
    connect?: integratorsWhereUniqueInput
  }

  export type sitesCreateNestedManyWithoutCustomersInput = {
    create?: XOR<Enumerable<sitesCreateWithoutCustomersInput>, Enumerable<sitesUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutCustomersInput>
    connect?: Enumerable<sitesWhereUniqueInput>
  }

  export type usersCreateNestedManyWithoutCustomersInput = {
    create?: XOR<Enumerable<usersCreateWithoutCustomersInput>, Enumerable<usersUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutCustomersInput>
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type groupsUpdateOneWithoutCustomersInput = {
    create?: XOR<groupsCreateWithoutCustomersInput, groupsUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: groupsCreateOrConnectWithoutCustomersInput
    upsert?: groupsUpsertWithoutCustomersInput
    connect?: groupsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<groupsUpdateWithoutCustomersInput, groupsUncheckedUpdateWithoutCustomersInput>
  }

  export type integratorsUpdateOneWithoutCustomersInput = {
    create?: XOR<integratorsCreateWithoutCustomersInput, integratorsUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutCustomersInput
    upsert?: integratorsUpsertWithoutCustomersInput
    connect?: integratorsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<integratorsUpdateWithoutCustomersInput, integratorsUncheckedUpdateWithoutCustomersInput>
  }

  export type sitesUpdateManyWithoutCustomersInput = {
    create?: XOR<Enumerable<sitesCreateWithoutCustomersInput>, Enumerable<sitesUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutCustomersInput>
    upsert?: Enumerable<sitesUpsertWithWhereUniqueWithoutCustomersInput>
    connect?: Enumerable<sitesWhereUniqueInput>
    set?: Enumerable<sitesWhereUniqueInput>
    disconnect?: Enumerable<sitesWhereUniqueInput>
    delete?: Enumerable<sitesWhereUniqueInput>
    update?: Enumerable<sitesUpdateWithWhereUniqueWithoutCustomersInput>
    updateMany?: Enumerable<sitesUpdateManyWithWhereWithoutCustomersInput>
    deleteMany?: Enumerable<sitesScalarWhereInput>
  }

  export type usersUpdateManyWithoutCustomersInput = {
    create?: XOR<Enumerable<usersCreateWithoutCustomersInput>, Enumerable<usersUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutCustomersInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutCustomersInput>
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutCustomersInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutCustomersInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type integratorsCreateNestedOneWithoutGroupsInput = {
    create?: XOR<integratorsCreateWithoutGroupsInput, integratorsUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutGroupsInput
    connect?: integratorsWhereUniqueInput
  }

  export type camerasCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<camerasCreateWithoutGroupsInput>, Enumerable<camerasUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutGroupsInput>
    createMany?: camerasCreateManyGroupsInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
  }

  export type customersCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<customersCreateWithoutGroupsInput>, Enumerable<customersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutGroupsInput>
    createMany?: customersCreateManyGroupsInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
  }

  export type sitesCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<sitesCreateWithoutGroupsInput>, Enumerable<sitesUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutGroupsInput>
    createMany?: sitesCreateManyGroupsInputEnvelope
    connect?: Enumerable<sitesWhereUniqueInput>
  }

  export type usersCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<usersCreateWithoutGroupsInput>, Enumerable<usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutGroupsInput>
    createMany?: usersCreateManyGroupsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type camerasUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<camerasCreateWithoutGroupsInput>, Enumerable<camerasUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutGroupsInput>
    createMany?: camerasCreateManyGroupsInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
  }

  export type customersUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<customersCreateWithoutGroupsInput>, Enumerable<customersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutGroupsInput>
    createMany?: customersCreateManyGroupsInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
  }

  export type sitesUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<sitesCreateWithoutGroupsInput>, Enumerable<sitesUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutGroupsInput>
    createMany?: sitesCreateManyGroupsInputEnvelope
    connect?: Enumerable<sitesWhereUniqueInput>
  }

  export type usersUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<usersCreateWithoutGroupsInput>, Enumerable<usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutGroupsInput>
    createMany?: usersCreateManyGroupsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type integratorsUpdateOneWithoutGroupsInput = {
    create?: XOR<integratorsCreateWithoutGroupsInput, integratorsUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutGroupsInput
    upsert?: integratorsUpsertWithoutGroupsInput
    connect?: integratorsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<integratorsUpdateWithoutGroupsInput, integratorsUncheckedUpdateWithoutGroupsInput>
  }

  export type camerasUpdateManyWithoutGroupsInput = {
    create?: XOR<Enumerable<camerasCreateWithoutGroupsInput>, Enumerable<camerasUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<camerasUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: camerasCreateManyGroupsInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
    set?: Enumerable<camerasWhereUniqueInput>
    disconnect?: Enumerable<camerasWhereUniqueInput>
    delete?: Enumerable<camerasWhereUniqueInput>
    update?: Enumerable<camerasUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<camerasUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<camerasScalarWhereInput>
  }

  export type customersUpdateManyWithoutGroupsInput = {
    create?: XOR<Enumerable<customersCreateWithoutGroupsInput>, Enumerable<customersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<customersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: customersCreateManyGroupsInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
    set?: Enumerable<customersWhereUniqueInput>
    disconnect?: Enumerable<customersWhereUniqueInput>
    delete?: Enumerable<customersWhereUniqueInput>
    update?: Enumerable<customersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<customersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<customersScalarWhereInput>
  }

  export type sitesUpdateManyWithoutGroupsInput = {
    create?: XOR<Enumerable<sitesCreateWithoutGroupsInput>, Enumerable<sitesUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<sitesUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: sitesCreateManyGroupsInputEnvelope
    connect?: Enumerable<sitesWhereUniqueInput>
    set?: Enumerable<sitesWhereUniqueInput>
    disconnect?: Enumerable<sitesWhereUniqueInput>
    delete?: Enumerable<sitesWhereUniqueInput>
    update?: Enumerable<sitesUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<sitesUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<sitesScalarWhereInput>
  }

  export type usersUpdateManyWithoutGroupsInput = {
    create?: XOR<Enumerable<usersCreateWithoutGroupsInput>, Enumerable<usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: usersCreateManyGroupsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type camerasUncheckedUpdateManyWithoutGroupsInput = {
    create?: XOR<Enumerable<camerasCreateWithoutGroupsInput>, Enumerable<camerasUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<camerasUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: camerasCreateManyGroupsInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
    set?: Enumerable<camerasWhereUniqueInput>
    disconnect?: Enumerable<camerasWhereUniqueInput>
    delete?: Enumerable<camerasWhereUniqueInput>
    update?: Enumerable<camerasUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<camerasUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<camerasScalarWhereInput>
  }

  export type customersUncheckedUpdateManyWithoutGroupsInput = {
    create?: XOR<Enumerable<customersCreateWithoutGroupsInput>, Enumerable<customersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<customersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: customersCreateManyGroupsInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
    set?: Enumerable<customersWhereUniqueInput>
    disconnect?: Enumerable<customersWhereUniqueInput>
    delete?: Enumerable<customersWhereUniqueInput>
    update?: Enumerable<customersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<customersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<customersScalarWhereInput>
  }

  export type sitesUncheckedUpdateManyWithoutGroupsInput = {
    create?: XOR<Enumerable<sitesCreateWithoutGroupsInput>, Enumerable<sitesUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<sitesUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: sitesCreateManyGroupsInputEnvelope
    connect?: Enumerable<sitesWhereUniqueInput>
    set?: Enumerable<sitesWhereUniqueInput>
    disconnect?: Enumerable<sitesWhereUniqueInput>
    delete?: Enumerable<sitesWhereUniqueInput>
    update?: Enumerable<sitesUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<sitesUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<sitesScalarWhereInput>
  }

  export type usersUncheckedUpdateManyWithoutGroupsInput = {
    create?: XOR<Enumerable<usersCreateWithoutGroupsInput>, Enumerable<usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: usersCreateManyGroupsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type camerasCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<camerasCreateWithoutIntegratorsInput>, Enumerable<camerasUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutIntegratorsInput>
    createMany?: camerasCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
  }

  export type customersCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<customersCreateWithoutIntegratorsInput>, Enumerable<customersUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutIntegratorsInput>
    createMany?: customersCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
  }

  export type groupsCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<groupsCreateWithoutIntegratorsInput>, Enumerable<groupsUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<groupsCreateOrConnectWithoutIntegratorsInput>
    createMany?: groupsCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<groupsWhereUniqueInput>
  }

  export type sitesCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<sitesCreateWithoutIntegratorsInput>, Enumerable<sitesUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutIntegratorsInput>
    createMany?: sitesCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<sitesWhereUniqueInput>
  }

  export type usersCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<usersCreateWithoutIntegratorsInput>, Enumerable<usersUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutIntegratorsInput>
    createMany?: usersCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type camerasUncheckedCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<camerasCreateWithoutIntegratorsInput>, Enumerable<camerasUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutIntegratorsInput>
    createMany?: camerasCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
  }

  export type customersUncheckedCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<customersCreateWithoutIntegratorsInput>, Enumerable<customersUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutIntegratorsInput>
    createMany?: customersCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
  }

  export type groupsUncheckedCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<groupsCreateWithoutIntegratorsInput>, Enumerable<groupsUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<groupsCreateOrConnectWithoutIntegratorsInput>
    createMany?: groupsCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<groupsWhereUniqueInput>
  }

  export type sitesUncheckedCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<sitesCreateWithoutIntegratorsInput>, Enumerable<sitesUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutIntegratorsInput>
    createMany?: sitesCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<sitesWhereUniqueInput>
  }

  export type usersUncheckedCreateNestedManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<usersCreateWithoutIntegratorsInput>, Enumerable<usersUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutIntegratorsInput>
    createMany?: usersCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type camerasUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<camerasCreateWithoutIntegratorsInput>, Enumerable<camerasUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<camerasUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: camerasCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
    set?: Enumerable<camerasWhereUniqueInput>
    disconnect?: Enumerable<camerasWhereUniqueInput>
    delete?: Enumerable<camerasWhereUniqueInput>
    update?: Enumerable<camerasUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<camerasUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<camerasScalarWhereInput>
  }

  export type customersUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<customersCreateWithoutIntegratorsInput>, Enumerable<customersUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<customersUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: customersCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
    set?: Enumerable<customersWhereUniqueInput>
    disconnect?: Enumerable<customersWhereUniqueInput>
    delete?: Enumerable<customersWhereUniqueInput>
    update?: Enumerable<customersUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<customersUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<customersScalarWhereInput>
  }

  export type groupsUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<groupsCreateWithoutIntegratorsInput>, Enumerable<groupsUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<groupsCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<groupsUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: groupsCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<groupsWhereUniqueInput>
    set?: Enumerable<groupsWhereUniqueInput>
    disconnect?: Enumerable<groupsWhereUniqueInput>
    delete?: Enumerable<groupsWhereUniqueInput>
    update?: Enumerable<groupsUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<groupsUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<groupsScalarWhereInput>
  }

  export type sitesUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<sitesCreateWithoutIntegratorsInput>, Enumerable<sitesUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<sitesUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: sitesCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<sitesWhereUniqueInput>
    set?: Enumerable<sitesWhereUniqueInput>
    disconnect?: Enumerable<sitesWhereUniqueInput>
    delete?: Enumerable<sitesWhereUniqueInput>
    update?: Enumerable<sitesUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<sitesUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<sitesScalarWhereInput>
  }

  export type usersUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<usersCreateWithoutIntegratorsInput>, Enumerable<usersUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: usersCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type camerasUncheckedUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<camerasCreateWithoutIntegratorsInput>, Enumerable<camerasUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<camerasUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: camerasCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
    set?: Enumerable<camerasWhereUniqueInput>
    disconnect?: Enumerable<camerasWhereUniqueInput>
    delete?: Enumerable<camerasWhereUniqueInput>
    update?: Enumerable<camerasUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<camerasUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<camerasScalarWhereInput>
  }

  export type customersUncheckedUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<customersCreateWithoutIntegratorsInput>, Enumerable<customersUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<customersUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: customersCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
    set?: Enumerable<customersWhereUniqueInput>
    disconnect?: Enumerable<customersWhereUniqueInput>
    delete?: Enumerable<customersWhereUniqueInput>
    update?: Enumerable<customersUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<customersUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<customersScalarWhereInput>
  }

  export type groupsUncheckedUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<groupsCreateWithoutIntegratorsInput>, Enumerable<groupsUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<groupsCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<groupsUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: groupsCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<groupsWhereUniqueInput>
    set?: Enumerable<groupsWhereUniqueInput>
    disconnect?: Enumerable<groupsWhereUniqueInput>
    delete?: Enumerable<groupsWhereUniqueInput>
    update?: Enumerable<groupsUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<groupsUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<groupsScalarWhereInput>
  }

  export type sitesUncheckedUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<sitesCreateWithoutIntegratorsInput>, Enumerable<sitesUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<sitesUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: sitesCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<sitesWhereUniqueInput>
    set?: Enumerable<sitesWhereUniqueInput>
    disconnect?: Enumerable<sitesWhereUniqueInput>
    delete?: Enumerable<sitesWhereUniqueInput>
    update?: Enumerable<sitesUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<sitesUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<sitesScalarWhereInput>
  }

  export type usersUncheckedUpdateManyWithoutIntegratorsInput = {
    create?: XOR<Enumerable<usersCreateWithoutIntegratorsInput>, Enumerable<usersUncheckedCreateWithoutIntegratorsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutIntegratorsInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutIntegratorsInput>
    createMany?: usersCreateManyIntegratorsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutIntegratorsInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutIntegratorsInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type groupsCreateNestedOneWithoutSitesInput = {
    create?: XOR<groupsCreateWithoutSitesInput, groupsUncheckedCreateWithoutSitesInput>
    connectOrCreate?: groupsCreateOrConnectWithoutSitesInput
    connect?: groupsWhereUniqueInput
  }

  export type integratorsCreateNestedOneWithoutSitesInput = {
    create?: XOR<integratorsCreateWithoutSitesInput, integratorsUncheckedCreateWithoutSitesInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutSitesInput
    connect?: integratorsWhereUniqueInput
  }

  export type camerasCreateNestedManyWithoutSitesInput = {
    create?: XOR<Enumerable<camerasCreateWithoutSitesInput>, Enumerable<camerasUncheckedCreateWithoutSitesInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutSitesInput>
    createMany?: camerasCreateManySitesInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
  }

  export type customersCreateNestedManyWithoutSitesInput = {
    create?: XOR<Enumerable<customersCreateWithoutSitesInput>, Enumerable<customersUncheckedCreateWithoutSitesInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutSitesInput>
    connect?: Enumerable<customersWhereUniqueInput>
  }

  export type usersCreateNestedManyWithoutSitesInput = {
    create?: XOR<Enumerable<usersCreateWithoutSitesInput>, Enumerable<usersUncheckedCreateWithoutSitesInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutSitesInput>
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type camerasUncheckedCreateNestedManyWithoutSitesInput = {
    create?: XOR<Enumerable<camerasCreateWithoutSitesInput>, Enumerable<camerasUncheckedCreateWithoutSitesInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutSitesInput>
    createMany?: camerasCreateManySitesInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
  }

  export type groupsUpdateOneWithoutSitesInput = {
    create?: XOR<groupsCreateWithoutSitesInput, groupsUncheckedCreateWithoutSitesInput>
    connectOrCreate?: groupsCreateOrConnectWithoutSitesInput
    upsert?: groupsUpsertWithoutSitesInput
    connect?: groupsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<groupsUpdateWithoutSitesInput, groupsUncheckedUpdateWithoutSitesInput>
  }

  export type integratorsUpdateOneWithoutSitesInput = {
    create?: XOR<integratorsCreateWithoutSitesInput, integratorsUncheckedCreateWithoutSitesInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutSitesInput
    upsert?: integratorsUpsertWithoutSitesInput
    connect?: integratorsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<integratorsUpdateWithoutSitesInput, integratorsUncheckedUpdateWithoutSitesInput>
  }

  export type camerasUpdateManyWithoutSitesInput = {
    create?: XOR<Enumerable<camerasCreateWithoutSitesInput>, Enumerable<camerasUncheckedCreateWithoutSitesInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutSitesInput>
    upsert?: Enumerable<camerasUpsertWithWhereUniqueWithoutSitesInput>
    createMany?: camerasCreateManySitesInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
    set?: Enumerable<camerasWhereUniqueInput>
    disconnect?: Enumerable<camerasWhereUniqueInput>
    delete?: Enumerable<camerasWhereUniqueInput>
    update?: Enumerable<camerasUpdateWithWhereUniqueWithoutSitesInput>
    updateMany?: Enumerable<camerasUpdateManyWithWhereWithoutSitesInput>
    deleteMany?: Enumerable<camerasScalarWhereInput>
  }

  export type customersUpdateManyWithoutSitesInput = {
    create?: XOR<Enumerable<customersCreateWithoutSitesInput>, Enumerable<customersUncheckedCreateWithoutSitesInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutSitesInput>
    upsert?: Enumerable<customersUpsertWithWhereUniqueWithoutSitesInput>
    connect?: Enumerable<customersWhereUniqueInput>
    set?: Enumerable<customersWhereUniqueInput>
    disconnect?: Enumerable<customersWhereUniqueInput>
    delete?: Enumerable<customersWhereUniqueInput>
    update?: Enumerable<customersUpdateWithWhereUniqueWithoutSitesInput>
    updateMany?: Enumerable<customersUpdateManyWithWhereWithoutSitesInput>
    deleteMany?: Enumerable<customersScalarWhereInput>
  }

  export type usersUpdateManyWithoutSitesInput = {
    create?: XOR<Enumerable<usersCreateWithoutSitesInput>, Enumerable<usersUncheckedCreateWithoutSitesInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutSitesInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutSitesInput>
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutSitesInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutSitesInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type camerasUncheckedUpdateManyWithoutSitesInput = {
    create?: XOR<Enumerable<camerasCreateWithoutSitesInput>, Enumerable<camerasUncheckedCreateWithoutSitesInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutSitesInput>
    upsert?: Enumerable<camerasUpsertWithWhereUniqueWithoutSitesInput>
    createMany?: camerasCreateManySitesInputEnvelope
    connect?: Enumerable<camerasWhereUniqueInput>
    set?: Enumerable<camerasWhereUniqueInput>
    disconnect?: Enumerable<camerasWhereUniqueInput>
    delete?: Enumerable<camerasWhereUniqueInput>
    update?: Enumerable<camerasUpdateWithWhereUniqueWithoutSitesInput>
    updateMany?: Enumerable<camerasUpdateManyWithWhereWithoutSitesInput>
    deleteMany?: Enumerable<camerasScalarWhereInput>
  }

  export type groupsCreateNestedOneWithoutUsersInput = {
    create?: XOR<groupsCreateWithoutUsersInput, groupsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: groupsCreateOrConnectWithoutUsersInput
    connect?: groupsWhereUniqueInput
  }

  export type integratorsCreateNestedOneWithoutUsersInput = {
    create?: XOR<integratorsCreateWithoutUsersInput, integratorsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutUsersInput
    connect?: integratorsWhereUniqueInput
  }

  export type camerasCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<camerasCreateWithoutUsersInput>, Enumerable<camerasUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<camerasWhereUniqueInput>
  }

  export type customersCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<customersCreateWithoutUsersInput>, Enumerable<customersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<customersWhereUniqueInput>
  }

  export type sitesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<sitesCreateWithoutUsersInput>, Enumerable<sitesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<sitesWhereUniqueInput>
  }

  export type groupsUpdateOneWithoutUsersInput = {
    create?: XOR<groupsCreateWithoutUsersInput, groupsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: groupsCreateOrConnectWithoutUsersInput
    upsert?: groupsUpsertWithoutUsersInput
    connect?: groupsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<groupsUpdateWithoutUsersInput, groupsUncheckedUpdateWithoutUsersInput>
  }

  export type integratorsUpdateOneWithoutUsersInput = {
    create?: XOR<integratorsCreateWithoutUsersInput, integratorsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: integratorsCreateOrConnectWithoutUsersInput
    upsert?: integratorsUpsertWithoutUsersInput
    connect?: integratorsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<integratorsUpdateWithoutUsersInput, integratorsUncheckedUpdateWithoutUsersInput>
  }

  export type camerasUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<camerasCreateWithoutUsersInput>, Enumerable<camerasUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<camerasCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<camerasUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<camerasWhereUniqueInput>
    set?: Enumerable<camerasWhereUniqueInput>
    disconnect?: Enumerable<camerasWhereUniqueInput>
    delete?: Enumerable<camerasWhereUniqueInput>
    update?: Enumerable<camerasUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<camerasUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<camerasScalarWhereInput>
  }

  export type customersUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<customersCreateWithoutUsersInput>, Enumerable<customersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<customersUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<customersWhereUniqueInput>
    set?: Enumerable<customersWhereUniqueInput>
    disconnect?: Enumerable<customersWhereUniqueInput>
    delete?: Enumerable<customersWhereUniqueInput>
    update?: Enumerable<customersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<customersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<customersScalarWhereInput>
  }

  export type sitesUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<sitesCreateWithoutUsersInput>, Enumerable<sitesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<sitesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<sitesUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<sitesWhereUniqueInput>
    set?: Enumerable<sitesWhereUniqueInput>
    disconnect?: Enumerable<sitesWhereUniqueInput>
    delete?: Enumerable<sitesWhereUniqueInput>
    update?: Enumerable<sitesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<sitesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<sitesScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type groupsCreateWithoutCamerasInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutGroupsInput
    customers?: customersCreateNestedManyWithoutGroupsInput
    sites?: sitesCreateNestedManyWithoutGroupsInput
    users?: usersCreateNestedManyWithoutGroupsInput
  }

  export type groupsUncheckedCreateWithoutCamerasInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customers?: customersUncheckedCreateNestedManyWithoutGroupsInput
    sites?: sitesUncheckedCreateNestedManyWithoutGroupsInput
    users?: usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type groupsCreateOrConnectWithoutCamerasInput = {
    where: groupsWhereUniqueInput
    create: XOR<groupsCreateWithoutCamerasInput, groupsUncheckedCreateWithoutCamerasInput>
  }

  export type integratorsCreateWithoutCamerasInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customers?: customersCreateNestedManyWithoutIntegratorsInput
    groups?: groupsCreateNestedManyWithoutIntegratorsInput
    sites?: sitesCreateNestedManyWithoutIntegratorsInput
    users?: usersCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedCreateWithoutCamerasInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customers?: customersUncheckedCreateNestedManyWithoutIntegratorsInput
    groups?: groupsUncheckedCreateNestedManyWithoutIntegratorsInput
    sites?: sitesUncheckedCreateNestedManyWithoutIntegratorsInput
    users?: usersUncheckedCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsCreateOrConnectWithoutCamerasInput = {
    where: integratorsWhereUniqueInput
    create: XOR<integratorsCreateWithoutCamerasInput, integratorsUncheckedCreateWithoutCamerasInput>
  }

  export type sitesCreateWithoutCamerasInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutSitesInput
    integrators?: integratorsCreateNestedOneWithoutSitesInput
    customers?: customersCreateNestedManyWithoutSitesInput
    users?: usersCreateNestedManyWithoutSitesInput
  }

  export type sitesUncheckedCreateWithoutCamerasInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sitesCreateOrConnectWithoutCamerasInput = {
    where: sitesWhereUniqueInput
    create: XOR<sitesCreateWithoutCamerasInput, sitesUncheckedCreateWithoutCamerasInput>
  }

  export type usersCreateWithoutCamerasInput = {
    user_id?: string
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutUsersInput
    integrators?: integratorsCreateNestedOneWithoutUsersInput
    customers?: customersCreateNestedManyWithoutUsersInput
    sites?: sitesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCamerasInput = {
    user_id?: string
    group_id?: string | null
    integrator_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateOrConnectWithoutCamerasInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCamerasInput, usersUncheckedCreateWithoutCamerasInput>
  }

  export type groupsUpsertWithoutCamerasInput = {
    update: XOR<groupsUpdateWithoutCamerasInput, groupsUncheckedUpdateWithoutCamerasInput>
    create: XOR<groupsCreateWithoutCamerasInput, groupsUncheckedCreateWithoutCamerasInput>
  }

  export type groupsUpdateWithoutCamerasInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutGroupsInput
    customers?: customersUpdateManyWithoutGroupsInput
    sites?: sitesUpdateManyWithoutGroupsInput
    users?: usersUpdateManyWithoutGroupsInput
  }

  export type groupsUncheckedUpdateWithoutCamerasInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customers?: customersUncheckedUpdateManyWithoutGroupsInput
    sites?: sitesUncheckedUpdateManyWithoutGroupsInput
    users?: usersUncheckedUpdateManyWithoutGroupsInput
  }

  export type integratorsUpsertWithoutCamerasInput = {
    update: XOR<integratorsUpdateWithoutCamerasInput, integratorsUncheckedUpdateWithoutCamerasInput>
    create: XOR<integratorsCreateWithoutCamerasInput, integratorsUncheckedCreateWithoutCamerasInput>
  }

  export type integratorsUpdateWithoutCamerasInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customers?: customersUpdateManyWithoutIntegratorsInput
    groups?: groupsUpdateManyWithoutIntegratorsInput
    sites?: sitesUpdateManyWithoutIntegratorsInput
    users?: usersUpdateManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedUpdateWithoutCamerasInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customers?: customersUncheckedUpdateManyWithoutIntegratorsInput
    groups?: groupsUncheckedUpdateManyWithoutIntegratorsInput
    sites?: sitesUncheckedUpdateManyWithoutIntegratorsInput
    users?: usersUncheckedUpdateManyWithoutIntegratorsInput
  }

  export type sitesUpsertWithoutCamerasInput = {
    update: XOR<sitesUpdateWithoutCamerasInput, sitesUncheckedUpdateWithoutCamerasInput>
    create: XOR<sitesCreateWithoutCamerasInput, sitesUncheckedCreateWithoutCamerasInput>
  }

  export type sitesUpdateWithoutCamerasInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutSitesInput
    integrators?: integratorsUpdateOneWithoutSitesInput
    customers?: customersUpdateManyWithoutSitesInput
    users?: usersUpdateManyWithoutSitesInput
  }

  export type sitesUncheckedUpdateWithoutCamerasInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpsertWithWhereUniqueWithoutCamerasInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutCamerasInput, usersUncheckedUpdateWithoutCamerasInput>
    create: XOR<usersCreateWithoutCamerasInput, usersUncheckedCreateWithoutCamerasInput>
  }

  export type usersUpdateWithWhereUniqueWithoutCamerasInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutCamerasInput, usersUncheckedUpdateWithoutCamerasInput>
  }

  export type usersUpdateManyWithWhereWithoutCamerasInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUsersInput>
  }

  export type usersScalarWhereInput = {
    AND?: Enumerable<usersScalarWhereInput>
    OR?: Enumerable<usersScalarWhereInput>
    NOT?: Enumerable<usersScalarWhereInput>
    user_id?: StringFilter | string
    group_id?: StringNullableFilter | string | null
    integrator_id?: StringNullableFilter | string | null
    user_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    user_email?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type groupsCreateWithoutCustomersInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutGroupsInput
    cameras?: camerasCreateNestedManyWithoutGroupsInput
    sites?: sitesCreateNestedManyWithoutGroupsInput
    users?: usersCreateNestedManyWithoutGroupsInput
  }

  export type groupsUncheckedCreateWithoutCustomersInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutGroupsInput
    sites?: sitesUncheckedCreateNestedManyWithoutGroupsInput
    users?: usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type groupsCreateOrConnectWithoutCustomersInput = {
    where: groupsWhereUniqueInput
    create: XOR<groupsCreateWithoutCustomersInput, groupsUncheckedCreateWithoutCustomersInput>
  }

  export type integratorsCreateWithoutCustomersInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasCreateNestedManyWithoutIntegratorsInput
    groups?: groupsCreateNestedManyWithoutIntegratorsInput
    sites?: sitesCreateNestedManyWithoutIntegratorsInput
    users?: usersCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedCreateWithoutCustomersInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutIntegratorsInput
    groups?: groupsUncheckedCreateNestedManyWithoutIntegratorsInput
    sites?: sitesUncheckedCreateNestedManyWithoutIntegratorsInput
    users?: usersUncheckedCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsCreateOrConnectWithoutCustomersInput = {
    where: integratorsWhereUniqueInput
    create: XOR<integratorsCreateWithoutCustomersInput, integratorsUncheckedCreateWithoutCustomersInput>
  }

  export type sitesCreateWithoutCustomersInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutSitesInput
    integrators?: integratorsCreateNestedOneWithoutSitesInput
    cameras?: camerasCreateNestedManyWithoutSitesInput
    users?: usersCreateNestedManyWithoutSitesInput
  }

  export type sitesUncheckedCreateWithoutCustomersInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutSitesInput
  }

  export type sitesCreateOrConnectWithoutCustomersInput = {
    where: sitesWhereUniqueInput
    create: XOR<sitesCreateWithoutCustomersInput, sitesUncheckedCreateWithoutCustomersInput>
  }

  export type usersCreateWithoutCustomersInput = {
    user_id?: string
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutUsersInput
    integrators?: integratorsCreateNestedOneWithoutUsersInput
    cameras?: camerasCreateNestedManyWithoutUsersInput
    sites?: sitesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCustomersInput = {
    user_id?: string
    group_id?: string | null
    integrator_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateOrConnectWithoutCustomersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCustomersInput, usersUncheckedCreateWithoutCustomersInput>
  }

  export type groupsUpsertWithoutCustomersInput = {
    update: XOR<groupsUpdateWithoutCustomersInput, groupsUncheckedUpdateWithoutCustomersInput>
    create: XOR<groupsCreateWithoutCustomersInput, groupsUncheckedCreateWithoutCustomersInput>
  }

  export type groupsUpdateWithoutCustomersInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutGroupsInput
    cameras?: camerasUpdateManyWithoutGroupsInput
    sites?: sitesUpdateManyWithoutGroupsInput
    users?: usersUpdateManyWithoutGroupsInput
  }

  export type groupsUncheckedUpdateWithoutCustomersInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutGroupsInput
    sites?: sitesUncheckedUpdateManyWithoutGroupsInput
    users?: usersUncheckedUpdateManyWithoutGroupsInput
  }

  export type integratorsUpsertWithoutCustomersInput = {
    update: XOR<integratorsUpdateWithoutCustomersInput, integratorsUncheckedUpdateWithoutCustomersInput>
    create: XOR<integratorsCreateWithoutCustomersInput, integratorsUncheckedCreateWithoutCustomersInput>
  }

  export type integratorsUpdateWithoutCustomersInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUpdateManyWithoutIntegratorsInput
    groups?: groupsUpdateManyWithoutIntegratorsInput
    sites?: sitesUpdateManyWithoutIntegratorsInput
    users?: usersUpdateManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedUpdateWithoutCustomersInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutIntegratorsInput
    groups?: groupsUncheckedUpdateManyWithoutIntegratorsInput
    sites?: sitesUncheckedUpdateManyWithoutIntegratorsInput
    users?: usersUncheckedUpdateManyWithoutIntegratorsInput
  }

  export type sitesUpsertWithWhereUniqueWithoutCustomersInput = {
    where: sitesWhereUniqueInput
    update: XOR<sitesUpdateWithoutCustomersInput, sitesUncheckedUpdateWithoutCustomersInput>
    create: XOR<sitesCreateWithoutCustomersInput, sitesUncheckedCreateWithoutCustomersInput>
  }

  export type sitesUpdateWithWhereUniqueWithoutCustomersInput = {
    where: sitesWhereUniqueInput
    data: XOR<sitesUpdateWithoutCustomersInput, sitesUncheckedUpdateWithoutCustomersInput>
  }

  export type sitesUpdateManyWithWhereWithoutCustomersInput = {
    where: sitesScalarWhereInput
    data: XOR<sitesUpdateManyMutationInput, sitesUncheckedUpdateManyWithoutSitesInput>
  }

  export type sitesScalarWhereInput = {
    AND?: Enumerable<sitesScalarWhereInput>
    OR?: Enumerable<sitesScalarWhereInput>
    NOT?: Enumerable<sitesScalarWhereInput>
    site_id?: StringFilter | string
    site_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    group_id?: StringNullableFilter | string | null
    integrator_id?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type usersUpsertWithWhereUniqueWithoutCustomersInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutCustomersInput, usersUncheckedUpdateWithoutCustomersInput>
    create: XOR<usersCreateWithoutCustomersInput, usersUncheckedCreateWithoutCustomersInput>
  }

  export type usersUpdateWithWhereUniqueWithoutCustomersInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutCustomersInput, usersUncheckedUpdateWithoutCustomersInput>
  }

  export type usersUpdateManyWithWhereWithoutCustomersInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUsersInput>
  }

  export type integratorsCreateWithoutGroupsInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasCreateNestedManyWithoutIntegratorsInput
    customers?: customersCreateNestedManyWithoutIntegratorsInput
    sites?: sitesCreateNestedManyWithoutIntegratorsInput
    users?: usersCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedCreateWithoutGroupsInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutIntegratorsInput
    customers?: customersUncheckedCreateNestedManyWithoutIntegratorsInput
    sites?: sitesUncheckedCreateNestedManyWithoutIntegratorsInput
    users?: usersUncheckedCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsCreateOrConnectWithoutGroupsInput = {
    where: integratorsWhereUniqueInput
    create: XOR<integratorsCreateWithoutGroupsInput, integratorsUncheckedCreateWithoutGroupsInput>
  }

  export type camerasCreateWithoutGroupsInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutCamerasInput
    sites?: sitesCreateNestedOneWithoutCamerasInput
    users?: usersCreateNestedManyWithoutCamerasInput
  }

  export type camerasUncheckedCreateWithoutGroupsInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    site_id?: string | null
    integrator_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasCreateOrConnectWithoutGroupsInput = {
    where: camerasWhereUniqueInput
    create: XOR<camerasCreateWithoutGroupsInput, camerasUncheckedCreateWithoutGroupsInput>
  }

  export type camerasCreateManyGroupsInputEnvelope = {
    data: Enumerable<camerasCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type customersCreateWithoutGroupsInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutCustomersInput
    sites?: sitesCreateNestedManyWithoutCustomersInput
    users?: usersCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutGroupsInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type customersCreateOrConnectWithoutGroupsInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutGroupsInput, customersUncheckedCreateWithoutGroupsInput>
  }

  export type customersCreateManyGroupsInputEnvelope = {
    data: Enumerable<customersCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type sitesCreateWithoutGroupsInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutSitesInput
    cameras?: camerasCreateNestedManyWithoutSitesInput
    customers?: customersCreateNestedManyWithoutSitesInput
    users?: usersCreateNestedManyWithoutSitesInput
  }

  export type sitesUncheckedCreateWithoutGroupsInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutSitesInput
  }

  export type sitesCreateOrConnectWithoutGroupsInput = {
    where: sitesWhereUniqueInput
    create: XOR<sitesCreateWithoutGroupsInput, sitesUncheckedCreateWithoutGroupsInput>
  }

  export type sitesCreateManyGroupsInputEnvelope = {
    data: Enumerable<sitesCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutGroupsInput = {
    user_id?: string
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutUsersInput
    cameras?: camerasCreateNestedManyWithoutUsersInput
    customers?: customersCreateNestedManyWithoutUsersInput
    sites?: sitesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutGroupsInput = {
    user_id?: string
    integrator_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateOrConnectWithoutGroupsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutGroupsInput, usersUncheckedCreateWithoutGroupsInput>
  }

  export type usersCreateManyGroupsInputEnvelope = {
    data: Enumerable<usersCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type integratorsUpsertWithoutGroupsInput = {
    update: XOR<integratorsUpdateWithoutGroupsInput, integratorsUncheckedUpdateWithoutGroupsInput>
    create: XOR<integratorsCreateWithoutGroupsInput, integratorsUncheckedCreateWithoutGroupsInput>
  }

  export type integratorsUpdateWithoutGroupsInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUpdateManyWithoutIntegratorsInput
    customers?: customersUpdateManyWithoutIntegratorsInput
    sites?: sitesUpdateManyWithoutIntegratorsInput
    users?: usersUpdateManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedUpdateWithoutGroupsInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutIntegratorsInput
    customers?: customersUncheckedUpdateManyWithoutIntegratorsInput
    sites?: sitesUncheckedUpdateManyWithoutIntegratorsInput
    users?: usersUncheckedUpdateManyWithoutIntegratorsInput
  }

  export type camerasUpsertWithWhereUniqueWithoutGroupsInput = {
    where: camerasWhereUniqueInput
    update: XOR<camerasUpdateWithoutGroupsInput, camerasUncheckedUpdateWithoutGroupsInput>
    create: XOR<camerasCreateWithoutGroupsInput, camerasUncheckedCreateWithoutGroupsInput>
  }

  export type camerasUpdateWithWhereUniqueWithoutGroupsInput = {
    where: camerasWhereUniqueInput
    data: XOR<camerasUpdateWithoutGroupsInput, camerasUncheckedUpdateWithoutGroupsInput>
  }

  export type camerasUpdateManyWithWhereWithoutGroupsInput = {
    where: camerasScalarWhereInput
    data: XOR<camerasUpdateManyMutationInput, camerasUncheckedUpdateManyWithoutCamerasInput>
  }

  export type camerasScalarWhereInput = {
    AND?: Enumerable<camerasScalarWhereInput>
    OR?: Enumerable<camerasScalarWhereInput>
    NOT?: Enumerable<camerasScalarWhereInput>
    camera_id?: StringFilter | string
    camera_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    camera_ip?: StringNullableFilter | string | null
    total_request?: IntNullableFilter | number | null
    smtp_user_name?: StringNullableFilter | string | null
    smtp_password?: StringNullableFilter | string | null
    group_id?: StringNullableFilter | string | null
    site_id?: StringNullableFilter | string | null
    integrator_id?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type customersUpsertWithWhereUniqueWithoutGroupsInput = {
    where: customersWhereUniqueInput
    update: XOR<customersUpdateWithoutGroupsInput, customersUncheckedUpdateWithoutGroupsInput>
    create: XOR<customersCreateWithoutGroupsInput, customersUncheckedCreateWithoutGroupsInput>
  }

  export type customersUpdateWithWhereUniqueWithoutGroupsInput = {
    where: customersWhereUniqueInput
    data: XOR<customersUpdateWithoutGroupsInput, customersUncheckedUpdateWithoutGroupsInput>
  }

  export type customersUpdateManyWithWhereWithoutGroupsInput = {
    where: customersScalarWhereInput
    data: XOR<customersUpdateManyMutationInput, customersUncheckedUpdateManyWithoutCustomersInput>
  }

  export type customersScalarWhereInput = {
    AND?: Enumerable<customersScalarWhereInput>
    OR?: Enumerable<customersScalarWhereInput>
    NOT?: Enumerable<customersScalarWhereInput>
    customer_id?: StringFilter | string
    customer_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    group_id?: StringNullableFilter | string | null
    integrator_id?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type sitesUpsertWithWhereUniqueWithoutGroupsInput = {
    where: sitesWhereUniqueInput
    update: XOR<sitesUpdateWithoutGroupsInput, sitesUncheckedUpdateWithoutGroupsInput>
    create: XOR<sitesCreateWithoutGroupsInput, sitesUncheckedCreateWithoutGroupsInput>
  }

  export type sitesUpdateWithWhereUniqueWithoutGroupsInput = {
    where: sitesWhereUniqueInput
    data: XOR<sitesUpdateWithoutGroupsInput, sitesUncheckedUpdateWithoutGroupsInput>
  }

  export type sitesUpdateManyWithWhereWithoutGroupsInput = {
    where: sitesScalarWhereInput
    data: XOR<sitesUpdateManyMutationInput, sitesUncheckedUpdateManyWithoutSitesInput>
  }

  export type usersUpsertWithWhereUniqueWithoutGroupsInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutGroupsInput, usersUncheckedUpdateWithoutGroupsInput>
    create: XOR<usersCreateWithoutGroupsInput, usersUncheckedCreateWithoutGroupsInput>
  }

  export type usersUpdateWithWhereUniqueWithoutGroupsInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutGroupsInput, usersUncheckedUpdateWithoutGroupsInput>
  }

  export type usersUpdateManyWithWhereWithoutGroupsInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUsersInput>
  }

  export type camerasCreateWithoutIntegratorsInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutCamerasInput
    sites?: sitesCreateNestedOneWithoutCamerasInput
    users?: usersCreateNestedManyWithoutCamerasInput
  }

  export type camerasUncheckedCreateWithoutIntegratorsInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    group_id?: string | null
    site_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasCreateOrConnectWithoutIntegratorsInput = {
    where: camerasWhereUniqueInput
    create: XOR<camerasCreateWithoutIntegratorsInput, camerasUncheckedCreateWithoutIntegratorsInput>
  }

  export type camerasCreateManyIntegratorsInputEnvelope = {
    data: Enumerable<camerasCreateManyIntegratorsInput>
    skipDuplicates?: boolean
  }

  export type customersCreateWithoutIntegratorsInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutCustomersInput
    sites?: sitesCreateNestedManyWithoutCustomersInput
    users?: usersCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutIntegratorsInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type customersCreateOrConnectWithoutIntegratorsInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutIntegratorsInput, customersUncheckedCreateWithoutIntegratorsInput>
  }

  export type customersCreateManyIntegratorsInputEnvelope = {
    data: Enumerable<customersCreateManyIntegratorsInput>
    skipDuplicates?: boolean
  }

  export type groupsCreateWithoutIntegratorsInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasCreateNestedManyWithoutGroupsInput
    customers?: customersCreateNestedManyWithoutGroupsInput
    sites?: sitesCreateNestedManyWithoutGroupsInput
    users?: usersCreateNestedManyWithoutGroupsInput
  }

  export type groupsUncheckedCreateWithoutIntegratorsInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutGroupsInput
    customers?: customersUncheckedCreateNestedManyWithoutGroupsInput
    sites?: sitesUncheckedCreateNestedManyWithoutGroupsInput
    users?: usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type groupsCreateOrConnectWithoutIntegratorsInput = {
    where: groupsWhereUniqueInput
    create: XOR<groupsCreateWithoutIntegratorsInput, groupsUncheckedCreateWithoutIntegratorsInput>
  }

  export type groupsCreateManyIntegratorsInputEnvelope = {
    data: Enumerable<groupsCreateManyIntegratorsInput>
    skipDuplicates?: boolean
  }

  export type sitesCreateWithoutIntegratorsInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutSitesInput
    cameras?: camerasCreateNestedManyWithoutSitesInput
    customers?: customersCreateNestedManyWithoutSitesInput
    users?: usersCreateNestedManyWithoutSitesInput
  }

  export type sitesUncheckedCreateWithoutIntegratorsInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutSitesInput
  }

  export type sitesCreateOrConnectWithoutIntegratorsInput = {
    where: sitesWhereUniqueInput
    create: XOR<sitesCreateWithoutIntegratorsInput, sitesUncheckedCreateWithoutIntegratorsInput>
  }

  export type sitesCreateManyIntegratorsInputEnvelope = {
    data: Enumerable<sitesCreateManyIntegratorsInput>
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutIntegratorsInput = {
    user_id?: string
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutUsersInput
    cameras?: camerasCreateNestedManyWithoutUsersInput
    customers?: customersCreateNestedManyWithoutUsersInput
    sites?: sitesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutIntegratorsInput = {
    user_id?: string
    group_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateOrConnectWithoutIntegratorsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutIntegratorsInput, usersUncheckedCreateWithoutIntegratorsInput>
  }

  export type usersCreateManyIntegratorsInputEnvelope = {
    data: Enumerable<usersCreateManyIntegratorsInput>
    skipDuplicates?: boolean
  }

  export type camerasUpsertWithWhereUniqueWithoutIntegratorsInput = {
    where: camerasWhereUniqueInput
    update: XOR<camerasUpdateWithoutIntegratorsInput, camerasUncheckedUpdateWithoutIntegratorsInput>
    create: XOR<camerasCreateWithoutIntegratorsInput, camerasUncheckedCreateWithoutIntegratorsInput>
  }

  export type camerasUpdateWithWhereUniqueWithoutIntegratorsInput = {
    where: camerasWhereUniqueInput
    data: XOR<camerasUpdateWithoutIntegratorsInput, camerasUncheckedUpdateWithoutIntegratorsInput>
  }

  export type camerasUpdateManyWithWhereWithoutIntegratorsInput = {
    where: camerasScalarWhereInput
    data: XOR<camerasUpdateManyMutationInput, camerasUncheckedUpdateManyWithoutCamerasInput>
  }

  export type customersUpsertWithWhereUniqueWithoutIntegratorsInput = {
    where: customersWhereUniqueInput
    update: XOR<customersUpdateWithoutIntegratorsInput, customersUncheckedUpdateWithoutIntegratorsInput>
    create: XOR<customersCreateWithoutIntegratorsInput, customersUncheckedCreateWithoutIntegratorsInput>
  }

  export type customersUpdateWithWhereUniqueWithoutIntegratorsInput = {
    where: customersWhereUniqueInput
    data: XOR<customersUpdateWithoutIntegratorsInput, customersUncheckedUpdateWithoutIntegratorsInput>
  }

  export type customersUpdateManyWithWhereWithoutIntegratorsInput = {
    where: customersScalarWhereInput
    data: XOR<customersUpdateManyMutationInput, customersUncheckedUpdateManyWithoutCustomersInput>
  }

  export type groupsUpsertWithWhereUniqueWithoutIntegratorsInput = {
    where: groupsWhereUniqueInput
    update: XOR<groupsUpdateWithoutIntegratorsInput, groupsUncheckedUpdateWithoutIntegratorsInput>
    create: XOR<groupsCreateWithoutIntegratorsInput, groupsUncheckedCreateWithoutIntegratorsInput>
  }

  export type groupsUpdateWithWhereUniqueWithoutIntegratorsInput = {
    where: groupsWhereUniqueInput
    data: XOR<groupsUpdateWithoutIntegratorsInput, groupsUncheckedUpdateWithoutIntegratorsInput>
  }

  export type groupsUpdateManyWithWhereWithoutIntegratorsInput = {
    where: groupsScalarWhereInput
    data: XOR<groupsUpdateManyMutationInput, groupsUncheckedUpdateManyWithoutGroupsInput>
  }

  export type groupsScalarWhereInput = {
    AND?: Enumerable<groupsScalarWhereInput>
    OR?: Enumerable<groupsScalarWhereInput>
    NOT?: Enumerable<groupsScalarWhereInput>
    group_id?: StringFilter | string
    group_name?: StringNullableFilter | string | null
    change_name?: StringNullableFilter | string | null
    is_disabled?: BoolNullableFilter | boolean | null
    integrator_id?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type sitesUpsertWithWhereUniqueWithoutIntegratorsInput = {
    where: sitesWhereUniqueInput
    update: XOR<sitesUpdateWithoutIntegratorsInput, sitesUncheckedUpdateWithoutIntegratorsInput>
    create: XOR<sitesCreateWithoutIntegratorsInput, sitesUncheckedCreateWithoutIntegratorsInput>
  }

  export type sitesUpdateWithWhereUniqueWithoutIntegratorsInput = {
    where: sitesWhereUniqueInput
    data: XOR<sitesUpdateWithoutIntegratorsInput, sitesUncheckedUpdateWithoutIntegratorsInput>
  }

  export type sitesUpdateManyWithWhereWithoutIntegratorsInput = {
    where: sitesScalarWhereInput
    data: XOR<sitesUpdateManyMutationInput, sitesUncheckedUpdateManyWithoutSitesInput>
  }

  export type usersUpsertWithWhereUniqueWithoutIntegratorsInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutIntegratorsInput, usersUncheckedUpdateWithoutIntegratorsInput>
    create: XOR<usersCreateWithoutIntegratorsInput, usersUncheckedCreateWithoutIntegratorsInput>
  }

  export type usersUpdateWithWhereUniqueWithoutIntegratorsInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutIntegratorsInput, usersUncheckedUpdateWithoutIntegratorsInput>
  }

  export type usersUpdateManyWithWhereWithoutIntegratorsInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUsersInput>
  }

  export type groupsCreateWithoutSitesInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutGroupsInput
    cameras?: camerasCreateNestedManyWithoutGroupsInput
    customers?: customersCreateNestedManyWithoutGroupsInput
    users?: usersCreateNestedManyWithoutGroupsInput
  }

  export type groupsUncheckedCreateWithoutSitesInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutGroupsInput
    customers?: customersUncheckedCreateNestedManyWithoutGroupsInput
    users?: usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type groupsCreateOrConnectWithoutSitesInput = {
    where: groupsWhereUniqueInput
    create: XOR<groupsCreateWithoutSitesInput, groupsUncheckedCreateWithoutSitesInput>
  }

  export type integratorsCreateWithoutSitesInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasCreateNestedManyWithoutIntegratorsInput
    customers?: customersCreateNestedManyWithoutIntegratorsInput
    groups?: groupsCreateNestedManyWithoutIntegratorsInput
    users?: usersCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedCreateWithoutSitesInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutIntegratorsInput
    customers?: customersUncheckedCreateNestedManyWithoutIntegratorsInput
    groups?: groupsUncheckedCreateNestedManyWithoutIntegratorsInput
    users?: usersUncheckedCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsCreateOrConnectWithoutSitesInput = {
    where: integratorsWhereUniqueInput
    create: XOR<integratorsCreateWithoutSitesInput, integratorsUncheckedCreateWithoutSitesInput>
  }

  export type camerasCreateWithoutSitesInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutCamerasInput
    integrators?: integratorsCreateNestedOneWithoutCamerasInput
    users?: usersCreateNestedManyWithoutCamerasInput
  }

  export type camerasUncheckedCreateWithoutSitesInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    group_id?: string | null
    integrator_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasCreateOrConnectWithoutSitesInput = {
    where: camerasWhereUniqueInput
    create: XOR<camerasCreateWithoutSitesInput, camerasUncheckedCreateWithoutSitesInput>
  }

  export type camerasCreateManySitesInputEnvelope = {
    data: Enumerable<camerasCreateManySitesInput>
    skipDuplicates?: boolean
  }

  export type customersCreateWithoutSitesInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutCustomersInput
    integrators?: integratorsCreateNestedOneWithoutCustomersInput
    users?: usersCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutSitesInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type customersCreateOrConnectWithoutSitesInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutSitesInput, customersUncheckedCreateWithoutSitesInput>
  }

  export type usersCreateWithoutSitesInput = {
    user_id?: string
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutUsersInput
    integrators?: integratorsCreateNestedOneWithoutUsersInput
    cameras?: camerasCreateNestedManyWithoutUsersInput
    customers?: customersCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutSitesInput = {
    user_id?: string
    group_id?: string | null
    integrator_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateOrConnectWithoutSitesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSitesInput, usersUncheckedCreateWithoutSitesInput>
  }

  export type groupsUpsertWithoutSitesInput = {
    update: XOR<groupsUpdateWithoutSitesInput, groupsUncheckedUpdateWithoutSitesInput>
    create: XOR<groupsCreateWithoutSitesInput, groupsUncheckedCreateWithoutSitesInput>
  }

  export type groupsUpdateWithoutSitesInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutGroupsInput
    cameras?: camerasUpdateManyWithoutGroupsInput
    customers?: customersUpdateManyWithoutGroupsInput
    users?: usersUpdateManyWithoutGroupsInput
  }

  export type groupsUncheckedUpdateWithoutSitesInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutGroupsInput
    customers?: customersUncheckedUpdateManyWithoutGroupsInput
    users?: usersUncheckedUpdateManyWithoutGroupsInput
  }

  export type integratorsUpsertWithoutSitesInput = {
    update: XOR<integratorsUpdateWithoutSitesInput, integratorsUncheckedUpdateWithoutSitesInput>
    create: XOR<integratorsCreateWithoutSitesInput, integratorsUncheckedCreateWithoutSitesInput>
  }

  export type integratorsUpdateWithoutSitesInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUpdateManyWithoutIntegratorsInput
    customers?: customersUpdateManyWithoutIntegratorsInput
    groups?: groupsUpdateManyWithoutIntegratorsInput
    users?: usersUpdateManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedUpdateWithoutSitesInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutIntegratorsInput
    customers?: customersUncheckedUpdateManyWithoutIntegratorsInput
    groups?: groupsUncheckedUpdateManyWithoutIntegratorsInput
    users?: usersUncheckedUpdateManyWithoutIntegratorsInput
  }

  export type camerasUpsertWithWhereUniqueWithoutSitesInput = {
    where: camerasWhereUniqueInput
    update: XOR<camerasUpdateWithoutSitesInput, camerasUncheckedUpdateWithoutSitesInput>
    create: XOR<camerasCreateWithoutSitesInput, camerasUncheckedCreateWithoutSitesInput>
  }

  export type camerasUpdateWithWhereUniqueWithoutSitesInput = {
    where: camerasWhereUniqueInput
    data: XOR<camerasUpdateWithoutSitesInput, camerasUncheckedUpdateWithoutSitesInput>
  }

  export type camerasUpdateManyWithWhereWithoutSitesInput = {
    where: camerasScalarWhereInput
    data: XOR<camerasUpdateManyMutationInput, camerasUncheckedUpdateManyWithoutCamerasInput>
  }

  export type customersUpsertWithWhereUniqueWithoutSitesInput = {
    where: customersWhereUniqueInput
    update: XOR<customersUpdateWithoutSitesInput, customersUncheckedUpdateWithoutSitesInput>
    create: XOR<customersCreateWithoutSitesInput, customersUncheckedCreateWithoutSitesInput>
  }

  export type customersUpdateWithWhereUniqueWithoutSitesInput = {
    where: customersWhereUniqueInput
    data: XOR<customersUpdateWithoutSitesInput, customersUncheckedUpdateWithoutSitesInput>
  }

  export type customersUpdateManyWithWhereWithoutSitesInput = {
    where: customersScalarWhereInput
    data: XOR<customersUpdateManyMutationInput, customersUncheckedUpdateManyWithoutCustomersInput>
  }

  export type usersUpsertWithWhereUniqueWithoutSitesInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutSitesInput, usersUncheckedUpdateWithoutSitesInput>
    create: XOR<usersCreateWithoutSitesInput, usersUncheckedCreateWithoutSitesInput>
  }

  export type usersUpdateWithWhereUniqueWithoutSitesInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutSitesInput, usersUncheckedUpdateWithoutSitesInput>
  }

  export type usersUpdateManyWithWhereWithoutSitesInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUsersInput>
  }

  export type groupsCreateWithoutUsersInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    integrators?: integratorsCreateNestedOneWithoutGroupsInput
    cameras?: camerasCreateNestedManyWithoutGroupsInput
    customers?: customersCreateNestedManyWithoutGroupsInput
    sites?: sitesCreateNestedManyWithoutGroupsInput
  }

  export type groupsUncheckedCreateWithoutUsersInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutGroupsInput
    customers?: customersUncheckedCreateNestedManyWithoutGroupsInput
    sites?: sitesUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type groupsCreateOrConnectWithoutUsersInput = {
    where: groupsWhereUniqueInput
    create: XOR<groupsCreateWithoutUsersInput, groupsUncheckedCreateWithoutUsersInput>
  }

  export type integratorsCreateWithoutUsersInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasCreateNestedManyWithoutIntegratorsInput
    customers?: customersCreateNestedManyWithoutIntegratorsInput
    groups?: groupsCreateNestedManyWithoutIntegratorsInput
    sites?: sitesCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedCreateWithoutUsersInput = {
    integrator_id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutIntegratorsInput
    customers?: customersUncheckedCreateNestedManyWithoutIntegratorsInput
    groups?: groupsUncheckedCreateNestedManyWithoutIntegratorsInput
    sites?: sitesUncheckedCreateNestedManyWithoutIntegratorsInput
  }

  export type integratorsCreateOrConnectWithoutUsersInput = {
    where: integratorsWhereUniqueInput
    create: XOR<integratorsCreateWithoutUsersInput, integratorsUncheckedCreateWithoutUsersInput>
  }

  export type camerasCreateWithoutUsersInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutCamerasInput
    integrators?: integratorsCreateNestedOneWithoutCamerasInput
    sites?: sitesCreateNestedOneWithoutCamerasInput
  }

  export type camerasUncheckedCreateWithoutUsersInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    group_id?: string | null
    site_id?: string | null
    integrator_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasCreateOrConnectWithoutUsersInput = {
    where: camerasWhereUniqueInput
    create: XOR<camerasCreateWithoutUsersInput, camerasUncheckedCreateWithoutUsersInput>
  }

  export type customersCreateWithoutUsersInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutCustomersInput
    integrators?: integratorsCreateNestedOneWithoutCustomersInput
    sites?: sitesCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutUsersInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type customersCreateOrConnectWithoutUsersInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutUsersInput, customersUncheckedCreateWithoutUsersInput>
  }

  export type sitesCreateWithoutUsersInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: groupsCreateNestedOneWithoutSitesInput
    integrators?: integratorsCreateNestedOneWithoutSitesInput
    cameras?: camerasCreateNestedManyWithoutSitesInput
    customers?: customersCreateNestedManyWithoutSitesInput
  }

  export type sitesUncheckedCreateWithoutUsersInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cameras?: camerasUncheckedCreateNestedManyWithoutSitesInput
  }

  export type sitesCreateOrConnectWithoutUsersInput = {
    where: sitesWhereUniqueInput
    create: XOR<sitesCreateWithoutUsersInput, sitesUncheckedCreateWithoutUsersInput>
  }

  export type groupsUpsertWithoutUsersInput = {
    update: XOR<groupsUpdateWithoutUsersInput, groupsUncheckedUpdateWithoutUsersInput>
    create: XOR<groupsCreateWithoutUsersInput, groupsUncheckedCreateWithoutUsersInput>
  }

  export type groupsUpdateWithoutUsersInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutGroupsInput
    cameras?: camerasUpdateManyWithoutGroupsInput
    customers?: customersUpdateManyWithoutGroupsInput
    sites?: sitesUpdateManyWithoutGroupsInput
  }

  export type groupsUncheckedUpdateWithoutUsersInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutGroupsInput
    customers?: customersUncheckedUpdateManyWithoutGroupsInput
    sites?: sitesUncheckedUpdateManyWithoutGroupsInput
  }

  export type integratorsUpsertWithoutUsersInput = {
    update: XOR<integratorsUpdateWithoutUsersInput, integratorsUncheckedUpdateWithoutUsersInput>
    create: XOR<integratorsCreateWithoutUsersInput, integratorsUncheckedCreateWithoutUsersInput>
  }

  export type integratorsUpdateWithoutUsersInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUpdateManyWithoutIntegratorsInput
    customers?: customersUpdateManyWithoutIntegratorsInput
    groups?: groupsUpdateManyWithoutIntegratorsInput
    sites?: sitesUpdateManyWithoutIntegratorsInput
  }

  export type integratorsUncheckedUpdateWithoutUsersInput = {
    integrator_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutIntegratorsInput
    customers?: customersUncheckedUpdateManyWithoutIntegratorsInput
    groups?: groupsUncheckedUpdateManyWithoutIntegratorsInput
    sites?: sitesUncheckedUpdateManyWithoutIntegratorsInput
  }

  export type camerasUpsertWithWhereUniqueWithoutUsersInput = {
    where: camerasWhereUniqueInput
    update: XOR<camerasUpdateWithoutUsersInput, camerasUncheckedUpdateWithoutUsersInput>
    create: XOR<camerasCreateWithoutUsersInput, camerasUncheckedCreateWithoutUsersInput>
  }

  export type camerasUpdateWithWhereUniqueWithoutUsersInput = {
    where: camerasWhereUniqueInput
    data: XOR<camerasUpdateWithoutUsersInput, camerasUncheckedUpdateWithoutUsersInput>
  }

  export type camerasUpdateManyWithWhereWithoutUsersInput = {
    where: camerasScalarWhereInput
    data: XOR<camerasUpdateManyMutationInput, camerasUncheckedUpdateManyWithoutCamerasInput>
  }

  export type customersUpsertWithWhereUniqueWithoutUsersInput = {
    where: customersWhereUniqueInput
    update: XOR<customersUpdateWithoutUsersInput, customersUncheckedUpdateWithoutUsersInput>
    create: XOR<customersCreateWithoutUsersInput, customersUncheckedCreateWithoutUsersInput>
  }

  export type customersUpdateWithWhereUniqueWithoutUsersInput = {
    where: customersWhereUniqueInput
    data: XOR<customersUpdateWithoutUsersInput, customersUncheckedUpdateWithoutUsersInput>
  }

  export type customersUpdateManyWithWhereWithoutUsersInput = {
    where: customersScalarWhereInput
    data: XOR<customersUpdateManyMutationInput, customersUncheckedUpdateManyWithoutCustomersInput>
  }

  export type sitesUpsertWithWhereUniqueWithoutUsersInput = {
    where: sitesWhereUniqueInput
    update: XOR<sitesUpdateWithoutUsersInput, sitesUncheckedUpdateWithoutUsersInput>
    create: XOR<sitesCreateWithoutUsersInput, sitesUncheckedCreateWithoutUsersInput>
  }

  export type sitesUpdateWithWhereUniqueWithoutUsersInput = {
    where: sitesWhereUniqueInput
    data: XOR<sitesUpdateWithoutUsersInput, sitesUncheckedUpdateWithoutUsersInput>
  }

  export type sitesUpdateManyWithWhereWithoutUsersInput = {
    where: sitesScalarWhereInput
    data: XOR<sitesUpdateManyMutationInput, sitesUncheckedUpdateManyWithoutSitesInput>
  }

  export type usersUpdateWithoutCamerasInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutUsersInput
    integrators?: integratorsUpdateOneWithoutUsersInput
    customers?: customersUpdateManyWithoutUsersInput
    sites?: sitesUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutCamerasInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyWithoutUsersInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sitesUpdateWithoutCustomersInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutSitesInput
    integrators?: integratorsUpdateOneWithoutSitesInput
    cameras?: camerasUpdateManyWithoutSitesInput
    users?: usersUpdateManyWithoutSitesInput
  }

  export type sitesUncheckedUpdateWithoutCustomersInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutSitesInput
  }

  export type sitesUncheckedUpdateManyWithoutSitesInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpdateWithoutCustomersInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutUsersInput
    integrators?: integratorsUpdateOneWithoutUsersInput
    cameras?: camerasUpdateManyWithoutUsersInput
    sites?: sitesUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutCustomersInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type camerasCreateManyGroupsInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    site_id?: string | null
    integrator_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type customersCreateManyGroupsInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sitesCreateManyGroupsInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    integrator_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateManyGroupsInput = {
    user_id?: string
    integrator_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasUpdateWithoutGroupsInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutCamerasInput
    sites?: sitesUpdateOneWithoutCamerasInput
    users?: usersUpdateManyWithoutCamerasInput
  }

  export type camerasUncheckedUpdateWithoutGroupsInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    site_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type camerasUncheckedUpdateManyWithoutCamerasInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    site_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customersUpdateWithoutGroupsInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutCustomersInput
    sites?: sitesUpdateManyWithoutCustomersInput
    users?: usersUpdateManyWithoutCustomersInput
  }

  export type customersUncheckedUpdateWithoutGroupsInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customersUncheckedUpdateManyWithoutCustomersInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sitesUpdateWithoutGroupsInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutSitesInput
    cameras?: camerasUpdateManyWithoutSitesInput
    customers?: customersUpdateManyWithoutSitesInput
    users?: usersUpdateManyWithoutSitesInput
  }

  export type sitesUncheckedUpdateWithoutGroupsInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutSitesInput
  }

  export type usersUpdateWithoutGroupsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrators?: integratorsUpdateOneWithoutUsersInput
    cameras?: camerasUpdateManyWithoutUsersInput
    customers?: customersUpdateManyWithoutUsersInput
    sites?: sitesUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutGroupsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type camerasCreateManyIntegratorsInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    group_id?: string | null
    site_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type customersCreateManyIntegratorsInput = {
    customer_id?: string
    customer_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type groupsCreateManyIntegratorsInput = {
    group_id?: string
    group_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sitesCreateManyIntegratorsInput = {
    site_id?: string
    site_name?: string | null
    change_name?: string | null
    is_disabled?: boolean | null
    group_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateManyIntegratorsInput = {
    user_id?: string
    group_id?: string | null
    user_name?: string | null
    change_name?: string | null
    user_email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasUpdateWithoutIntegratorsInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutCamerasInput
    sites?: sitesUpdateOneWithoutCamerasInput
    users?: usersUpdateManyWithoutCamerasInput
  }

  export type camerasUncheckedUpdateWithoutIntegratorsInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    site_id?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customersUpdateWithoutIntegratorsInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutCustomersInput
    sites?: sitesUpdateManyWithoutCustomersInput
    users?: usersUpdateManyWithoutCustomersInput
  }

  export type customersUncheckedUpdateWithoutIntegratorsInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type groupsUpdateWithoutIntegratorsInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUpdateManyWithoutGroupsInput
    customers?: customersUpdateManyWithoutGroupsInput
    sites?: sitesUpdateManyWithoutGroupsInput
    users?: usersUpdateManyWithoutGroupsInput
  }

  export type groupsUncheckedUpdateWithoutIntegratorsInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutGroupsInput
    customers?: customersUncheckedUpdateManyWithoutGroupsInput
    sites?: sitesUncheckedUpdateManyWithoutGroupsInput
    users?: usersUncheckedUpdateManyWithoutGroupsInput
  }

  export type groupsUncheckedUpdateManyWithoutGroupsInput = {
    group_id?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sitesUpdateWithoutIntegratorsInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutSitesInput
    cameras?: camerasUpdateManyWithoutSitesInput
    customers?: customersUpdateManyWithoutSitesInput
    users?: usersUpdateManyWithoutSitesInput
  }

  export type sitesUncheckedUpdateWithoutIntegratorsInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutSitesInput
  }

  export type usersUpdateWithoutIntegratorsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutUsersInput
    cameras?: camerasUpdateManyWithoutUsersInput
    customers?: customersUpdateManyWithoutUsersInput
    sites?: sitesUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutIntegratorsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type camerasCreateManySitesInput = {
    camera_id?: string
    camera_name?: string | null
    change_name?: string | null
    camera_ip?: string | null
    total_request?: number | null
    smtp_user_name?: string | null
    smtp_password?: string | null
    group_id?: string | null
    integrator_id?: string | null
    email?: string | null
    is_disabled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type camerasUpdateWithoutSitesInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutCamerasInput
    integrators?: integratorsUpdateOneWithoutCamerasInput
    users?: usersUpdateManyWithoutCamerasInput
  }

  export type camerasUncheckedUpdateWithoutSitesInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customersUpdateWithoutSitesInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutCustomersInput
    integrators?: integratorsUpdateOneWithoutCustomersInput
    users?: usersUpdateManyWithoutCustomersInput
  }

  export type customersUncheckedUpdateWithoutSitesInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpdateWithoutSitesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutUsersInput
    integrators?: integratorsUpdateOneWithoutUsersInput
    cameras?: camerasUpdateManyWithoutUsersInput
    customers?: customersUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutSitesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type camerasUpdateWithoutUsersInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutCamerasInput
    integrators?: integratorsUpdateOneWithoutCamerasInput
    sites?: sitesUpdateOneWithoutCamerasInput
  }

  export type camerasUncheckedUpdateWithoutUsersInput = {
    camera_id?: StringFieldUpdateOperationsInput | string
    camera_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    camera_ip?: NullableStringFieldUpdateOperationsInput | string | null
    total_request?: NullableIntFieldUpdateOperationsInput | number | null
    smtp_user_name?: NullableStringFieldUpdateOperationsInput | string | null
    smtp_password?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    site_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customersUpdateWithoutUsersInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutCustomersInput
    integrators?: integratorsUpdateOneWithoutCustomersInput
    sites?: sitesUpdateManyWithoutCustomersInput
  }

  export type customersUncheckedUpdateWithoutUsersInput = {
    customer_id?: StringFieldUpdateOperationsInput | string
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sitesUpdateWithoutUsersInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: groupsUpdateOneWithoutSitesInput
    integrators?: integratorsUpdateOneWithoutSitesInput
    cameras?: camerasUpdateManyWithoutSitesInput
    customers?: customersUpdateManyWithoutSitesInput
  }

  export type sitesUncheckedUpdateWithoutUsersInput = {
    site_id?: StringFieldUpdateOperationsInput | string
    site_name?: NullableStringFieldUpdateOperationsInput | string | null
    change_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    group_id?: NullableStringFieldUpdateOperationsInput | string | null
    integrator_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cameras?: camerasUncheckedUpdateManyWithoutSitesInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}