
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.24.1
 * Query Engine version: f3e341280d96d0abc068f97e959ddf01f321a858
 */
Prisma.prismaVersion = {
  client: "2.24.1",
  engine: "f3e341280d96d0abc068f97e959ddf01f321a858"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CamerasScalarFieldEnum = makeEnum({
  camera_id: 'camera_id',
  camera_name: 'camera_name',
  change_name: 'change_name',
  camera_ip: 'camera_ip',
  total_request: 'total_request',
  smtp_user_name: 'smtp_user_name',
  smtp_password: 'smtp_password',
  group_id: 'group_id',
  site_id: 'site_id',
  integrator_id: 'integrator_id',
  email: 'email',
  is_disabled: 'is_disabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CustomersScalarFieldEnum = makeEnum({
  customer_id: 'customer_id',
  customer_name: 'customer_name',
  change_name: 'change_name',
  group_id: 'group_id',
  integrator_id: 'integrator_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.GroupsScalarFieldEnum = makeEnum({
  group_id: 'group_id',
  group_name: 'group_name',
  change_name: 'change_name',
  is_disabled: 'is_disabled',
  integrator_id: 'integrator_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntegratorsScalarFieldEnum = makeEnum({
  integrator_id: 'integrator_id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  is_disabled: 'is_disabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SitesScalarFieldEnum = makeEnum({
  site_id: 'site_id',
  site_name: 'site_name',
  change_name: 'change_name',
  group_id: 'group_id',
  integrator_id: 'integrator_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  group_id: 'group_id',
  integrator_id: 'integrator_id',
  user_name: 'user_name',
  change_name: 'change_name',
  user_email: 'user_email',
  is_disabled: 'is_disabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  cameras: 'cameras',
  customers: 'customers',
  groups: 'groups',
  integrators: 'integrators',
  sites: 'sites',
  users: 'users'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
